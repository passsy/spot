// ignore_for_file: require_trailing_commas
// coverage:ignore-file

import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Matchers for [SafeArea] auto-generated by spot
///
/// ```dart
/// spot<SafeArea>().printMatchers();
/// ```
/// Matchers for the properties of [SafeArea] provided via [Diagnosticable.debugFillProperties]
extension SafeAreaMatcher on WidgetMatcher<SafeArea> {
  /// Expects that left of [SafeArea] matches the condition in [match]
  WidgetMatcher<SafeArea> hasLeftWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('left', match);
  }

  /// Expects that left of [SafeArea] equals (==) [value]
  WidgetMatcher<SafeArea> hasLeft(bool? value) {
    return hasDiagnosticProp<bool>(
        'left', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that top of [SafeArea] matches the condition in [match]
  WidgetMatcher<SafeArea> hasTopWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('top', match);
  }

  /// Expects that top of [SafeArea] equals (==) [value]
  WidgetMatcher<SafeArea> hasTop(bool? value) {
    return hasDiagnosticProp<bool>(
        'top', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that right of [SafeArea] matches the condition in [match]
  WidgetMatcher<SafeArea> hasRightWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('right', match);
  }

  /// Expects that right of [SafeArea] equals (==) [value]
  WidgetMatcher<SafeArea> hasRight(bool? value) {
    return hasDiagnosticProp<bool>(
        'right', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that bottom of [SafeArea] matches the condition in [match]
  WidgetMatcher<SafeArea> hasBottomWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('bottom', match);
  }

  /// Expects that bottom of [SafeArea] equals (==) [value]
  WidgetMatcher<SafeArea> hasBottom(bool? value) {
    return hasDiagnosticProp<bool>(
        'bottom', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Allows filtering [SafeArea] by the properties provided via [Diagnosticable.debugFillProperties]
extension SafeAreaSelector on WidgetSelector<SafeArea> {
  /// Creates a [WidgetSelector] that finds all [SafeArea] where left matches the condition
  @useResult
  WidgetSelector<SafeArea> whereLeft(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('left', match);
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where left equals (==) [value]
  @useResult
  WidgetSelector<SafeArea> withLeft(bool? value) {
    return withDiagnosticProp<bool>(
        'left', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where top matches the condition
  @useResult
  WidgetSelector<SafeArea> whereTop(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('top', match);
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where top equals (==) [value]
  @useResult
  WidgetSelector<SafeArea> withTop(bool? value) {
    return withDiagnosticProp<bool>(
        'top', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where right matches the condition
  @useResult
  WidgetSelector<SafeArea> whereRight(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('right', match);
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where right equals (==) [value]
  @useResult
  WidgetSelector<SafeArea> withRight(bool? value) {
    return withDiagnosticProp<bool>(
        'right', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where bottom matches the condition
  @useResult
  WidgetSelector<SafeArea> whereBottom(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('bottom', match);
  }

  /// Creates a [WidgetSelector] that finds all [SafeArea] where bottom equals (==) [value]
  @useResult
  WidgetSelector<SafeArea> withBottom(bool? value) {
    return withDiagnosticProp<bool>(
        'bottom', (it) => value == null ? it.isNull() : it.equals(value));
  }
}
