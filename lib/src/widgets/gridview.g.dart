// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [GridView] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<GridView>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Allows filtering [GridView] by the properties provided via [Diagnosticable.debugFillProperties]
extension GridViewSelector on WidgetSelector<GridView> {
  /// Creates a [WidgetSelector] that finds all [GridView] where scrollDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().whereScrollDirection((it) => it.equals(Axis.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> whereScrollDirection(MatchProp<Axis> match) {
    return withDiagnosticProp<Axis>('scrollDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where scrollDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withScrollDirection(Axis.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withScrollDirection(Axis? value) {
    return withDiagnosticProp<Axis>('scrollDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where reverse matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().whereReverse((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> whereReverse(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('reverse', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where reverse equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withReverse(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withReverse(bool? value) {
    return withDiagnosticProp<bool>(
        'reverse', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where controller matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().whereController((it) => it.equals(ScrollController())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> whereController(MatchProp<ScrollController> match) {
    return withDiagnosticProp<ScrollController>('controller', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where controller equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withController(ScrollController()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withController(ScrollController? value) {
    return withDiagnosticProp<ScrollController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where primary matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().wherePrimary((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> wherePrimary(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('primary', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where primary equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withPrimary(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withPrimary(bool? value) {
    return withDiagnosticProp<bool>(
        'primary', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where physics matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().wherePhysics((it) => it.equals(BouncingScrollPhysics())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> wherePhysics(MatchProp<ScrollPhysics> match) {
    return withDiagnosticProp<ScrollPhysics>('physics', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where physics equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withPhysics(BouncingScrollPhysics()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withPhysics(ScrollPhysics? value) {
    return withDiagnosticProp<ScrollPhysics>(
        'physics', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where shrinkWrap matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().whereShrinkWrap((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> whereShrinkWrap(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('shrinkWrap', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where shrinkWrap equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withShrinkWrap(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withShrinkWrap(bool? value) {
    return withDiagnosticProp<bool>(
        'shrinkWrap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where padding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().wherePadding((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> wherePadding(MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Creates a [WidgetSelector] that finds all [GridView] where padding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().withPadding(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<GridView> withPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [GridView] provided via [Diagnosticable.debugFillProperties]
extension GridViewMatcher on WidgetMatcher<GridView> {
  /// Expects that scrollDirection of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasScrollDirectionWhere((it) => it.equals(Axis.values.first));
  /// ```
  WidgetMatcher<GridView> hasScrollDirectionWhere(MatchProp<Axis> match) {
    return hasDiagnosticProp<Axis>('scrollDirection', match);
  }

  /// Expects that scrollDirection of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasScrollDirection(Axis.values.first);
  /// ```
  WidgetMatcher<GridView> hasScrollDirection(Axis? value) {
    return hasDiagnosticProp<Axis>('scrollDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that reverse of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasReverseWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<GridView> hasReverseWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('reverse', match);
  }

  /// Expects that reverse of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasReverse(true);
  /// ```
  WidgetMatcher<GridView> hasReverse(bool? value) {
    return hasDiagnosticProp<bool>(
        'reverse', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that controller of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasControllerWhere((it) => it.equals(ScrollController()));
  /// ```
  WidgetMatcher<GridView> hasControllerWhere(
      MatchProp<ScrollController> match) {
    return hasDiagnosticProp<ScrollController>('controller', match);
  }

  /// Expects that controller of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasController(ScrollController());
  /// ```
  WidgetMatcher<GridView> hasController(ScrollController? value) {
    return hasDiagnosticProp<ScrollController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that primary of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPrimaryWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<GridView> hasPrimaryWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('primary', match);
  }

  /// Expects that primary of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPrimary(true);
  /// ```
  WidgetMatcher<GridView> hasPrimary(bool? value) {
    return hasDiagnosticProp<bool>(
        'primary', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that physics of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPhysicsWhere((it) => it.equals(BouncingScrollPhysics()));
  /// ```
  WidgetMatcher<GridView> hasPhysicsWhere(MatchProp<ScrollPhysics> match) {
    return hasDiagnosticProp<ScrollPhysics>('physics', match);
  }

  /// Expects that physics of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPhysics(BouncingScrollPhysics());
  /// ```
  WidgetMatcher<GridView> hasPhysics(ScrollPhysics? value) {
    return hasDiagnosticProp<ScrollPhysics>(
        'physics', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that shrinkWrap of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasShrinkWrapWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<GridView> hasShrinkWrapWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('shrinkWrap', match);
  }

  /// Expects that shrinkWrap of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasShrinkWrap(true);
  /// ```
  WidgetMatcher<GridView> hasShrinkWrap(bool? value) {
    return hasDiagnosticProp<bool>(
        'shrinkWrap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that padding of [GridView] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPaddingWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<GridView> hasPaddingWhere(MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Expects that padding of [GridView] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<GridView>().existsOnce().hasPadding(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<GridView> hasPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension GridViewGetter on WidgetMatcher<GridView> {
  /// Returns the scrollDirection of the matched [GridView] via [Widget.toDiagnosticsNode]
  Axis getScrollDirection() {
    return getDiagnosticProp<Axis>('scrollDirection');
  }

  /// Returns the reverse of the matched [GridView] via [Widget.toDiagnosticsNode]
  bool getReverse() {
    return getDiagnosticProp<bool>('reverse');
  }

  /// Returns the controller of the matched [GridView] via [Widget.toDiagnosticsNode]
  ScrollController getController() {
    return getDiagnosticProp<ScrollController>('controller');
  }

  /// Returns the primary of the matched [GridView] via [Widget.toDiagnosticsNode]
  bool getPrimary() {
    return getDiagnosticProp<bool>('primary');
  }

  /// Returns the physics of the matched [GridView] via [Widget.toDiagnosticsNode]
  ScrollPhysics getPhysics() {
    return getDiagnosticProp<ScrollPhysics>('physics');
  }

  /// Returns the shrinkWrap of the matched [GridView] via [Widget.toDiagnosticsNode]
  bool getShrinkWrap() {
    return getDiagnosticProp<bool>('shrinkWrap');
  }

  /// Returns the padding of the matched [GridView] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getPadding() {
    return getDiagnosticProp<EdgeInsetsGeometry>('padding');
  }
}
