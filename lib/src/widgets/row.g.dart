// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [Row] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<Row>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Allows filtering [Row] by the properties provided via [Diagnosticable.debugFillProperties]
extension RowSelector on WidgetSelector<Row> {
  /// Creates a [WidgetSelector] that finds all [Row] where direction matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereDirection((it) => it.equals(Axis.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereDirection(MatchProp<Axis> match) {
    return withDiagnosticProp<Axis>('direction', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where direction equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withDirection(Axis.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withDirection(Axis? value) {
    return withDiagnosticProp<Axis>(
        'direction', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where mainAxisAlignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereMainAxisAlignment((it) => it.equals(MainAxisAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereMainAxisAlignment(
      MatchProp<MainAxisAlignment> match) {
    return withDiagnosticProp<MainAxisAlignment>('mainAxisAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where mainAxisAlignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withMainAxisAlignment(MainAxisAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withMainAxisAlignment(MainAxisAlignment? value) {
    return withDiagnosticProp<MainAxisAlignment>('mainAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where mainAxisSize matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereMainAxisSize((it) => it.equals(MainAxisSize.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereMainAxisSize(MatchProp<MainAxisSize> match) {
    return withDiagnosticProp<MainAxisSize>('mainAxisSize', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where mainAxisSize equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withMainAxisSize(MainAxisSize.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withMainAxisSize(MainAxisSize? value) {
    return withDiagnosticProp<MainAxisSize>(
        'mainAxisSize', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where crossAxisAlignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereCrossAxisAlignment((it) => it.equals(CrossAxisAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereCrossAxisAlignment(
      MatchProp<CrossAxisAlignment> match) {
    return withDiagnosticProp<CrossAxisAlignment>('crossAxisAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where crossAxisAlignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withCrossAxisAlignment(CrossAxisAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withCrossAxisAlignment(CrossAxisAlignment? value) {
    return withDiagnosticProp<CrossAxisAlignment>('crossAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where textDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereTextDirection((it) => it.equals(TextDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereTextDirection(MatchProp<TextDirection> match) {
    return withDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where textDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withTextDirection(TextDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withTextDirection(TextDirection? value) {
    return withDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where verticalDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereVerticalDirection((it) => it.equals(VerticalDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereVerticalDirection(
      MatchProp<VerticalDirection> match) {
    return withDiagnosticProp<VerticalDirection>('verticalDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where verticalDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withVerticalDirection(VerticalDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withVerticalDirection(VerticalDirection? value) {
    return withDiagnosticProp<VerticalDirection>('verticalDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where textBaseline matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereTextBaseline((it) => it.equals(TextBaseline.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereTextBaseline(MatchProp<TextBaseline> match) {
    return withDiagnosticProp<TextBaseline>('textBaseline', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where textBaseline equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withTextBaseline(TextBaseline.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withTextBaseline(TextBaseline? value) {
    return withDiagnosticProp<TextBaseline>(
        'textBaseline', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Row] where renderObject matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().whereRenderObject((it) => it.equals(RenderBox())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> whereRenderObject(MatchProp<RenderFlex> match) {
    return withDiagnosticProp<RenderFlex>('renderObject', match);
  }

  /// Creates a [WidgetSelector] that finds all [Row] where renderObject equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().withRenderObject(RenderBox()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Row> withRenderObject(RenderFlex? value) {
    return withDiagnosticProp<RenderFlex>(
        'renderObject', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [Row] provided via [Diagnosticable.debugFillProperties]
extension RowMatcher on WidgetMatcher<Row> {
  /// Expects that direction of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasDirectionWhere((it) => it.equals(Axis.values.first));
  /// ```
  WidgetMatcher<Row> hasDirectionWhere(MatchProp<Axis> match) {
    return hasDiagnosticProp<Axis>('direction', match);
  }

  /// Expects that direction of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasDirection(Axis.values.first);
  /// ```
  WidgetMatcher<Row> hasDirection(Axis? value) {
    return hasDiagnosticProp<Axis>(
        'direction', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that mainAxisAlignment of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasMainAxisAlignmentWhere((it) => it.equals(MainAxisAlignment.values.first));
  /// ```
  WidgetMatcher<Row> hasMainAxisAlignmentWhere(
      MatchProp<MainAxisAlignment> match) {
    return hasDiagnosticProp<MainAxisAlignment>('mainAxisAlignment', match);
  }

  /// Expects that mainAxisAlignment of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasMainAxisAlignment(MainAxisAlignment.values.first);
  /// ```
  WidgetMatcher<Row> hasMainAxisAlignment(MainAxisAlignment? value) {
    return hasDiagnosticProp<MainAxisAlignment>('mainAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that mainAxisSize of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasMainAxisSizeWhere((it) => it.equals(MainAxisSize.values.first));
  /// ```
  WidgetMatcher<Row> hasMainAxisSizeWhere(MatchProp<MainAxisSize> match) {
    return hasDiagnosticProp<MainAxisSize>('mainAxisSize', match);
  }

  /// Expects that mainAxisSize of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasMainAxisSize(MainAxisSize.values.first);
  /// ```
  WidgetMatcher<Row> hasMainAxisSize(MainAxisSize? value) {
    return hasDiagnosticProp<MainAxisSize>(
        'mainAxisSize', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that crossAxisAlignment of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasCrossAxisAlignmentWhere((it) => it.equals(CrossAxisAlignment.values.first));
  /// ```
  WidgetMatcher<Row> hasCrossAxisAlignmentWhere(
      MatchProp<CrossAxisAlignment> match) {
    return hasDiagnosticProp<CrossAxisAlignment>('crossAxisAlignment', match);
  }

  /// Expects that crossAxisAlignment of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasCrossAxisAlignment(CrossAxisAlignment.values.first);
  /// ```
  WidgetMatcher<Row> hasCrossAxisAlignment(CrossAxisAlignment? value) {
    return hasDiagnosticProp<CrossAxisAlignment>('crossAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textDirection of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasTextDirectionWhere((it) => it.equals(TextDirection.values.first));
  /// ```
  WidgetMatcher<Row> hasTextDirectionWhere(MatchProp<TextDirection> match) {
    return hasDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Expects that textDirection of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasTextDirection(TextDirection.values.first);
  /// ```
  WidgetMatcher<Row> hasTextDirection(TextDirection? value) {
    return hasDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that verticalDirection of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasVerticalDirectionWhere((it) => it.equals(VerticalDirection.values.first));
  /// ```
  WidgetMatcher<Row> hasVerticalDirectionWhere(
      MatchProp<VerticalDirection> match) {
    return hasDiagnosticProp<VerticalDirection>('verticalDirection', match);
  }

  /// Expects that verticalDirection of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasVerticalDirection(VerticalDirection.values.first);
  /// ```
  WidgetMatcher<Row> hasVerticalDirection(VerticalDirection? value) {
    return hasDiagnosticProp<VerticalDirection>('verticalDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textBaseline of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasTextBaselineWhere((it) => it.equals(TextBaseline.values.first));
  /// ```
  WidgetMatcher<Row> hasTextBaselineWhere(MatchProp<TextBaseline> match) {
    return hasDiagnosticProp<TextBaseline>('textBaseline', match);
  }

  /// Expects that textBaseline of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasTextBaseline(TextBaseline.values.first);
  /// ```
  WidgetMatcher<Row> hasTextBaseline(TextBaseline? value) {
    return hasDiagnosticProp<TextBaseline>(
        'textBaseline', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that renderObject of [Row] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasRenderObjectWhere((it) => it.equals(RenderBox()));
  /// ```
  WidgetMatcher<Row> hasRenderObjectWhere(MatchProp<RenderFlex> match) {
    return hasDiagnosticProp<RenderFlex>('renderObject', match);
  }

  /// Expects that renderObject of [Row] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Row>().existsOnce().hasRenderObject(RenderBox());
  /// ```
  WidgetMatcher<Row> hasRenderObject(RenderFlex? value) {
    return hasDiagnosticProp<RenderFlex>(
        'renderObject', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension RowGetter on WidgetMatcher<Row> {
  /// Returns the direction of the matched [Row] via [Widget.toDiagnosticsNode]
  Axis getDirection() {
    return getDiagnosticProp<Axis>('direction');
  }

  /// Returns the mainAxisAlignment of the matched [Row] via [Widget.toDiagnosticsNode]
  MainAxisAlignment getMainAxisAlignment() {
    return getDiagnosticProp<MainAxisAlignment>('mainAxisAlignment');
  }

  /// Returns the mainAxisSize of the matched [Row] via [Widget.toDiagnosticsNode]
  MainAxisSize getMainAxisSize() {
    return getDiagnosticProp<MainAxisSize>('mainAxisSize');
  }

  /// Returns the crossAxisAlignment of the matched [Row] via [Widget.toDiagnosticsNode]
  CrossAxisAlignment getCrossAxisAlignment() {
    return getDiagnosticProp<CrossAxisAlignment>('crossAxisAlignment');
  }

  /// Returns the textDirection of the matched [Row] via [Widget.toDiagnosticsNode]
  TextDirection getTextDirection() {
    return getDiagnosticProp<TextDirection>('textDirection');
  }

  /// Returns the verticalDirection of the matched [Row] via [Widget.toDiagnosticsNode]
  VerticalDirection getVerticalDirection() {
    return getDiagnosticProp<VerticalDirection>('verticalDirection');
  }

  /// Returns the textBaseline of the matched [Row] via [Widget.toDiagnosticsNode]
  TextBaseline getTextBaseline() {
    return getDiagnosticProp<TextBaseline>('textBaseline');
  }

  /// Returns the renderObject of the matched [Row] via [Widget.toDiagnosticsNode]
  RenderFlex getRenderObject() {
    return getDiagnosticProp<RenderFlex>('renderObject');
  }
}
