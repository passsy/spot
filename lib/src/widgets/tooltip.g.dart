// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [Tooltip] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<Tooltip>().printMatchers(propNameOverrides: {'vertical offset': 'verticalOffset'}, {'wait duration': 'waitDuration'}, {'show duration': 'showDuration'});
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Allows filtering [Tooltip] by the properties provided via [Diagnosticable.debugFillProperties]
extension TooltipSelector on WidgetSelector<Tooltip> {
  /// Creates a [WidgetSelector] that finds all [Tooltip] where message matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereMessage((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereMessage(MatchProp<String> match) {
    return withDiagnosticProp<String>('message', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where message equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withMessage('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withMessage(String? value) {
    return withDiagnosticProp<String>(
        'message', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where richMessage matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereRichMessage((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereRichMessage(MatchProp<String> match) {
    return withDiagnosticProp<String>('richMessage', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where richMessage equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withRichMessage('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withRichMessage(String? value) {
    return withDiagnosticProp<String>(
        'richMessage', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where height matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereHeight((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereHeight(MatchProp<double> match) {
    return withDiagnosticProp<double>('height', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where height equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withHeight(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withHeight(double? value) {
    return withDiagnosticProp<double>(
        'height', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where padding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().wherePadding((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> wherePadding(MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where padding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withPadding(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where margin matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereMargin((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereMargin(MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('margin', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where margin equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withMargin(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withMargin(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>(
        'margin', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where verticalOffset matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereVerticalOffset((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereVerticalOffset(MatchProp<double> match) {
    return withDiagnosticProp<double>('vertical offset', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where verticalOffset equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withVerticalOffset(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withVerticalOffset(double? value) {
    return withDiagnosticProp<double>('vertical offset',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where position matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().wherePosition((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> wherePosition(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('position', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where position equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withPosition(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withPosition(bool? value) {
    return withDiagnosticProp<bool>(
        'position', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where semantics matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereSemantics((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereSemantics(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('semantics', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where semantics equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withSemantics(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withSemantics(bool? value) {
    return withDiagnosticProp<bool>(
        'semantics', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where waitDuration matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereWaitDuration((it) => it.equals(Duration(seconds: 30))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereWaitDuration(MatchProp<Duration> match) {
    return withDiagnosticProp<Duration>('wait duration', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where waitDuration equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withWaitDuration(Duration(seconds: 30)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withWaitDuration(Duration? value) {
    return withDiagnosticProp<Duration>('wait duration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where showDuration matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereShowDuration((it) => it.equals(Duration(seconds: 30))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereShowDuration(MatchProp<Duration> match) {
    return withDiagnosticProp<Duration>('show duration', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where showDuration equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withShowDuration(Duration(seconds: 30)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withShowDuration(Duration? value) {
    return withDiagnosticProp<Duration>('show duration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where triggerMode matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereTriggerMode((it) => it.equals(TooltipTriggerMode.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereTriggerMode(
      MatchProp<TooltipTriggerMode> match) {
    return withDiagnosticProp<TooltipTriggerMode>('triggerMode', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where triggerMode equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withTriggerMode(TooltipTriggerMode.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withTriggerMode(TooltipTriggerMode? value) {
    return withDiagnosticProp<TooltipTriggerMode>(
        'triggerMode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where enableFeedback matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereEnableFeedback((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereEnableFeedback(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where enableFeedback equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withEnableFeedback(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withEnableFeedback(bool? value) {
    return withDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where textAlign matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().whereTextAlign((it) => it.equals(TextAlign.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> whereTextAlign(MatchProp<TextAlign> match) {
    return withDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Creates a [WidgetSelector] that finds all [Tooltip] where textAlign equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().withTextAlign(TextAlign.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Tooltip> withTextAlign(TextAlign? value) {
    return withDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [Tooltip] provided via [Diagnosticable.debugFillProperties]
extension TooltipMatcher on WidgetMatcher<Tooltip> {
  /// Expects that message of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasMessageWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<Tooltip> hasMessageWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('message', match);
  }

  /// Expects that message of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasMessage('foo');
  /// ```
  WidgetMatcher<Tooltip> hasMessage(String? value) {
    return hasDiagnosticProp<String>(
        'message', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that richMessage of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasRichMessageWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<Tooltip> hasRichMessageWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('richMessage', match);
  }

  /// Expects that richMessage of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasRichMessage('foo');
  /// ```
  WidgetMatcher<Tooltip> hasRichMessage(String? value) {
    return hasDiagnosticProp<String>(
        'richMessage', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that height of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasHeightWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<Tooltip> hasHeightWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('height', match);
  }

  /// Expects that height of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasHeight(10.5);
  /// ```
  WidgetMatcher<Tooltip> hasHeight(double? value) {
    return hasDiagnosticProp<double>(
        'height', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that padding of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasPaddingWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<Tooltip> hasPaddingWhere(MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Expects that padding of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasPadding(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<Tooltip> hasPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that margin of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasMarginWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<Tooltip> hasMarginWhere(MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('margin', match);
  }

  /// Expects that margin of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasMargin(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<Tooltip> hasMargin(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>(
        'margin', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that verticalOffset of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasVerticalOffsetWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<Tooltip> hasVerticalOffsetWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('vertical offset', match);
  }

  /// Expects that verticalOffset of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasVerticalOffset(10.5);
  /// ```
  WidgetMatcher<Tooltip> hasVerticalOffset(double? value) {
    return hasDiagnosticProp<double>('vertical offset',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that position of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasPositionWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<Tooltip> hasPositionWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('position', match);
  }

  /// Expects that position of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasPosition(true);
  /// ```
  WidgetMatcher<Tooltip> hasPosition(bool? value) {
    return hasDiagnosticProp<bool>(
        'position', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that semantics of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasSemanticsWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<Tooltip> hasSemanticsWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('semantics', match);
  }

  /// Expects that semantics of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasSemantics(true);
  /// ```
  WidgetMatcher<Tooltip> hasSemantics(bool? value) {
    return hasDiagnosticProp<bool>(
        'semantics', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that waitDuration of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasWaitDurationWhere((it) => it.equals(Duration(seconds: 30)));
  /// ```
  WidgetMatcher<Tooltip> hasWaitDurationWhere(MatchProp<Duration> match) {
    return hasDiagnosticProp<Duration>('wait duration', match);
  }

  /// Expects that waitDuration of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasWaitDuration(Duration(seconds: 30));
  /// ```
  WidgetMatcher<Tooltip> hasWaitDuration(Duration? value) {
    return hasDiagnosticProp<Duration>('wait duration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that showDuration of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasShowDurationWhere((it) => it.equals(Duration(seconds: 30)));
  /// ```
  WidgetMatcher<Tooltip> hasShowDurationWhere(MatchProp<Duration> match) {
    return hasDiagnosticProp<Duration>('show duration', match);
  }

  /// Expects that showDuration of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasShowDuration(Duration(seconds: 30));
  /// ```
  WidgetMatcher<Tooltip> hasShowDuration(Duration? value) {
    return hasDiagnosticProp<Duration>('show duration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that triggerMode of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasTriggerModeWhere((it) => it.equals(TooltipTriggerMode.values.first));
  /// ```
  WidgetMatcher<Tooltip> hasTriggerModeWhere(
      MatchProp<TooltipTriggerMode> match) {
    return hasDiagnosticProp<TooltipTriggerMode>('triggerMode', match);
  }

  /// Expects that triggerMode of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasTriggerMode(TooltipTriggerMode.values.first);
  /// ```
  WidgetMatcher<Tooltip> hasTriggerMode(TooltipTriggerMode? value) {
    return hasDiagnosticProp<TooltipTriggerMode>(
        'triggerMode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableFeedback of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasEnableFeedbackWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<Tooltip> hasEnableFeedbackWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Expects that enableFeedback of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasEnableFeedback(true);
  /// ```
  WidgetMatcher<Tooltip> hasEnableFeedback(bool? value) {
    return hasDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlign of [Tooltip] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasTextAlignWhere((it) => it.equals(TextAlign.values.first));
  /// ```
  WidgetMatcher<Tooltip> hasTextAlignWhere(MatchProp<TextAlign> match) {
    return hasDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Expects that textAlign of [Tooltip] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Tooltip>().existsOnce().hasTextAlign(TextAlign.values.first);
  /// ```
  WidgetMatcher<Tooltip> hasTextAlign(TextAlign? value) {
    return hasDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension TooltipGetter on WidgetMatcher<Tooltip> {
  /// Returns the message of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  String getMessage() {
    return getDiagnosticProp<String>('message');
  }

  /// Returns the richMessage of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  String getRichMessage() {
    return getDiagnosticProp<String>('richMessage');
  }

  /// Returns the height of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  double getHeight() {
    return getDiagnosticProp<double>('height');
  }

  /// Returns the padding of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getPadding() {
    return getDiagnosticProp<EdgeInsetsGeometry>('padding');
  }

  /// Returns the margin of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getMargin() {
    return getDiagnosticProp<EdgeInsetsGeometry>('margin');
  }

  /// Returns the verticalOffset of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  double getVerticalOffset() {
    return getDiagnosticProp<double>('vertical offset');
  }

  /// Returns the position of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  bool getPosition() {
    return getDiagnosticProp<bool>('position');
  }

  /// Returns the semantics of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  bool getSemantics() {
    return getDiagnosticProp<bool>('semantics');
  }

  /// Returns the waitDuration of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  Duration getWaitDuration() {
    return getDiagnosticProp<Duration>('wait duration');
  }

  /// Returns the showDuration of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  Duration getShowDuration() {
    return getDiagnosticProp<Duration>('show duration');
  }

  /// Returns the triggerMode of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  TooltipTriggerMode getTriggerMode() {
    return getDiagnosticProp<TooltipTriggerMode>('triggerMode');
  }

  /// Returns the enableFeedback of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  bool getEnableFeedback() {
    return getDiagnosticProp<bool>('enableFeedback');
  }

  /// Returns the textAlign of the matched [Tooltip] via [Widget.toDiagnosticsNode]
  TextAlign getTextAlign() {
    return getDiagnosticProp<TextAlign>('textAlign');
  }
}
