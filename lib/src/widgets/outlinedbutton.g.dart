// ignore_for_file: require_trailing_commas
// coverage:ignore-file

import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Matchers for [OutlinedButton] auto-generated by spot
///
/// ```dart
/// spot<OutlinedButton>().printMatchers();
/// ```
/// Matchers for the properties of [OutlinedButton] provided via [Diagnosticable.debugFillProperties]
extension OutlinedButtonMatcher on WidgetMatcher<OutlinedButton> {
  /// Expects that enabled of [OutlinedButton] matches the condition in [match]
  WidgetMatcher<OutlinedButton> isEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enabled', match);
  }

  /// Expects that enabled of [OutlinedButton] equals (==) [value]
  WidgetMatcher<OutlinedButton> isEnabled(bool? value) {
    return hasDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that style of [OutlinedButton] matches the condition in [match]
  WidgetMatcher<OutlinedButton> hasStyleWhere(MatchProp<ButtonStyle> match) {
    return hasDiagnosticProp<ButtonStyle>('style', match);
  }

  /// Expects that style of [OutlinedButton] equals (==) [value]
  WidgetMatcher<OutlinedButton> hasStyle(ButtonStyle? value) {
    return hasDiagnosticProp<ButtonStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [OutlinedButton] matches the condition in [match]
  WidgetMatcher<OutlinedButton> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [OutlinedButton] equals (==) [value]
  WidgetMatcher<OutlinedButton> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Allows filtering [OutlinedButton] by the properties provided via [Diagnosticable.debugFillProperties]
extension OutlinedButtonSelector on WidgetSelector<OutlinedButton> {
  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where enabled matches the condition
  @useResult
  WidgetSelector<OutlinedButton> whereEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where enabled equals (==) [value]
  @useResult
  WidgetSelector<OutlinedButton> withEnabled(bool? value) {
    return withDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where style matches the condition
  @useResult
  WidgetSelector<OutlinedButton> whereStyle(MatchProp<ButtonStyle> match) {
    return withDiagnosticProp<ButtonStyle>('style', match);
  }

  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where style equals (==) [value]
  @useResult
  WidgetSelector<OutlinedButton> withStyle(ButtonStyle? value) {
    return withDiagnosticProp<ButtonStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where focusNode matches the condition
  @useResult
  WidgetSelector<OutlinedButton> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [OutlinedButton] where focusNode equals (==) [value]
  @useResult
  WidgetSelector<OutlinedButton> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }
}
