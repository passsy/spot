// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [TextField] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<TextField>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:spot/spot.dart';

/// Allows filtering [TextField] by the properties provided via [Diagnosticable.debugFillProperties]
extension TextFieldSelector on WidgetSelector<TextField> {
  /// Creates a [WidgetSelector] that finds all [TextField] where controller matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereController((it) => it.equals(TextEditingController())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereController(
      MatchProp<TextEditingController> match) {
    return withDiagnosticProp<TextEditingController>('controller', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where controller equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withController(TextEditingController()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withController(TextEditingController? value) {
    return withDiagnosticProp<TextEditingController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where focusNode matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereFocusNode((it) => it.equals(FocusNode())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where focusNode equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withFocusNode(FocusNode()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where undoController matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereUndoController((it) => it.equals(UndoHistoryController())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereUndoController(
      MatchProp<UndoHistoryController> match) {
    return withDiagnosticProp<UndoHistoryController>('undoController', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where undoController equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withUndoController(UndoHistoryController()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withUndoController(UndoHistoryController? value) {
    return withDiagnosticProp<UndoHistoryController>('undoController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enabled matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereEnabled((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enabled equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withEnabled(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withEnabled(bool? value) {
    return withDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where decoration matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereDecoration((it) => it.equals(InputDecoration())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereDecoration(MatchProp<InputDecoration> match) {
    return withDiagnosticProp<InputDecoration>('decoration', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where decoration equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withDecoration(InputDecoration()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withDecoration(InputDecoration? value) {
    return withDiagnosticProp<InputDecoration>(
        'decoration', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardType matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereKeyboardType((it) => it.equals(TextInputType.text)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereKeyboardType(MatchProp<TextInputType> match) {
    return withDiagnosticProp<TextInputType>('keyboardType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardType equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withKeyboardType(TextInputType.text).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withKeyboardType(TextInputType? value) {
    return withDiagnosticProp<TextInputType>(
        'keyboardType', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where style matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereStyle((it) => it.equals(TextStyle())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('style', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where style equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withStyle(TextStyle()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autofocus matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereAutofocus((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereAutofocus(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autofocus', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autofocus equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withAutofocus(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withAutofocus(bool? value) {
    return withDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscuringCharacter matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereObscuringCharacter((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereObscuringCharacter(MatchProp<String> match) {
    return withDiagnosticProp<String>('obscuringCharacter', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscuringCharacter equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withObscuringCharacter('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withObscuringCharacter(String? value) {
    return withDiagnosticProp<String>('obscuringCharacter',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscureText matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereObscureText((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereObscureText(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('obscureText', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscureText equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withObscureText(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withObscureText(bool? value) {
    return withDiagnosticProp<bool>(
        'obscureText', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autocorrect matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereAutocorrect((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereAutocorrect(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autocorrect', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autocorrect equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withAutocorrect(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withAutocorrect(bool? value) {
    return withDiagnosticProp<bool>(
        'autocorrect', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartDashesType matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereSmartDashesType((it) => it.equals(SmartDashesType.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereSmartDashesType(
      MatchProp<SmartDashesType> match) {
    return withDiagnosticProp<SmartDashesType>('smartDashesType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartDashesType equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withSmartDashesType(SmartDashesType.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withSmartDashesType(SmartDashesType? value) {
    return withDiagnosticProp<SmartDashesType>('smartDashesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartQuotesType matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereSmartQuotesType((it) => it.equals(SmartQuotesType.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereSmartQuotesType(
      MatchProp<SmartQuotesType> match) {
    return withDiagnosticProp<SmartQuotesType>('smartQuotesType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartQuotesType equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withSmartQuotesType(SmartQuotesType.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withSmartQuotesType(SmartQuotesType? value) {
    return withDiagnosticProp<SmartQuotesType>('smartQuotesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableSuggestions matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereEnableSuggestions((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereEnableSuggestions(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableSuggestions', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableSuggestions equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withEnableSuggestions(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withEnableSuggestions(bool? value) {
    return withDiagnosticProp<bool>('enableSuggestions',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLines matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereMaxLines((it) => it.isGreaterThan(10)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereMaxLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('maxLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLines equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withMaxLines(10).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withMaxLines(int? value) {
    return withDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where minLines matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereMinLines((it) => it.isGreaterThan(10)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereMinLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('minLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where minLines equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withMinLines(10).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withMinLines(int? value) {
    return withDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where expands matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereExpands((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereExpands(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('expands', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where expands equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withExpands(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withExpands(bool? value) {
    return withDiagnosticProp<bool>(
        'expands', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLength matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereMaxLength((it) => it.isGreaterThan(10)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereMaxLength(MatchProp<int> match) {
    return withDiagnosticProp<int>('maxLength', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLength equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withMaxLength(10).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withMaxLength(int? value) {
    return withDiagnosticProp<int>(
        'maxLength', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLengthEnforcement matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereMaxLengthEnforcement((it) => it.equals(MaxLengthEnforcement.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereMaxLengthEnforcement(
      MatchProp<MaxLengthEnforcement> match) {
    return withDiagnosticProp<MaxLengthEnforcement>(
        'maxLengthEnforcement', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLengthEnforcement equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withMaxLengthEnforcement(MaxLengthEnforcement.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withMaxLengthEnforcement(
      MaxLengthEnforcement? value) {
    return withDiagnosticProp<MaxLengthEnforcement>('maxLengthEnforcement',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textInputAction matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereTextInputAction((it) => it.equals(TextInputAction.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereTextInputAction(
      MatchProp<TextInputAction> match) {
    return withDiagnosticProp<TextInputAction>('textInputAction', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textInputAction equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withTextInputAction(TextInputAction.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withTextInputAction(TextInputAction? value) {
    return withDiagnosticProp<TextInputAction>('textInputAction',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textCapitalization matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereTextCapitalization((it) => it.equals(TextCapitalization.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereTextCapitalization(
      MatchProp<TextCapitalization> match) {
    return withDiagnosticProp<TextCapitalization>('textCapitalization', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textCapitalization equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withTextCapitalization(TextCapitalization.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withTextCapitalization(TextCapitalization? value) {
    return withDiagnosticProp<TextCapitalization>('textCapitalization',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlign matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereTextAlign((it) => it.equals(TextAlign.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereTextAlign(MatchProp<TextAlign> match) {
    return withDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlign equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withTextAlign(TextAlign.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withTextAlign(TextAlign? value) {
    return withDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlignVertical matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereTextAlignVertical((it) => it.equals(TextAlignVertical.center)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereTextAlignVertical(
      MatchProp<TextAlignVertical> match) {
    return withDiagnosticProp<TextAlignVertical>('textAlignVertical', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlignVertical equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withTextAlignVertical(TextAlignVertical.center).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withTextAlignVertical(TextAlignVertical? value) {
    return withDiagnosticProp<TextAlignVertical>('textAlignVertical',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereTextDirection((it) => it.equals(TextDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereTextDirection(MatchProp<TextDirection> match) {
    return withDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withTextDirection(TextDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withTextDirection(TextDirection? value) {
    return withDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorWidth matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereCursorWidth((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereCursorWidth(MatchProp<double> match) {
    return withDiagnosticProp<double>('cursorWidth', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorWidth equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withCursorWidth(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withCursorWidth(double? value) {
    return withDiagnosticProp<double>(
        'cursorWidth', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorHeight matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereCursorHeight((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereCursorHeight(MatchProp<double> match) {
    return withDiagnosticProp<double>('cursorHeight', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorHeight equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withCursorHeight(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withCursorHeight(double? value) {
    return withDiagnosticProp<double>(
        'cursorHeight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorRadius matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereCursorRadius((it) => it.equals(Radius.circular(10.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereCursorRadius(MatchProp<Radius> match) {
    return withDiagnosticProp<Radius>('cursorRadius', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorRadius equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withCursorRadius(Radius.circular(10.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withCursorRadius(Radius? value) {
    return withDiagnosticProp<Radius>(
        'cursorRadius', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorOpacityAnimates matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereCursorOpacityAnimates((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereCursorOpacityAnimates(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('cursorOpacityAnimates', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorOpacityAnimates equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withCursorOpacityAnimates(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withCursorOpacityAnimates(bool? value) {
    return withDiagnosticProp<bool>('cursorOpacityAnimates',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereCursorColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereCursorColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('cursorColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withCursorColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withCursorColor(Color? value) {
    return withDiagnosticProp<Color>(
        'cursorColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardAppearance matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereKeyboardAppearance((it) => it.equals(Brightness.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereKeyboardAppearance(
      MatchProp<Brightness> match) {
    return withDiagnosticProp<Brightness>('keyboardAppearance', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardAppearance equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withKeyboardAppearance(Brightness.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withKeyboardAppearance(Brightness? value) {
    return withDiagnosticProp<Brightness>('keyboardAppearance',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPadding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereScrollPadding((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereScrollPadding(
      MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('scrollPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPadding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withScrollPadding(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withScrollPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>('scrollPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionEnabled matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereSelectionEnabled((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereSelectionEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('selectionEnabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionEnabled equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withSelectionEnabled(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withSelectionEnabled(bool? value) {
    return withDiagnosticProp<bool>('selectionEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionControls matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereSelectionControls((it) => it.equals(MaterialTextSelectionControls())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereSelectionControls(
      MatchProp<TextSelectionControls> match) {
    return withDiagnosticProp<TextSelectionControls>(
        'selectionControls', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionControls equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withSelectionControls(MaterialTextSelectionControls()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withSelectionControls(
      TextSelectionControls? value) {
    return withDiagnosticProp<TextSelectionControls>('selectionControls',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollController matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereScrollController((it) => it.equals(ScrollController())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereScrollController(
      MatchProp<ScrollController> match) {
    return withDiagnosticProp<ScrollController>('scrollController', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollController equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withScrollController(ScrollController()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withScrollController(ScrollController? value) {
    return withDiagnosticProp<ScrollController>('scrollController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPhysics matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereScrollPhysics((it) => it.equals(BouncingScrollPhysics())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereScrollPhysics(MatchProp<ScrollPhysics> match) {
    return withDiagnosticProp<ScrollPhysics>('scrollPhysics', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPhysics equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withScrollPhysics(BouncingScrollPhysics()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withScrollPhysics(ScrollPhysics? value) {
    return withDiagnosticProp<ScrollPhysics>('scrollPhysics',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where clipBehavior matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereClipBehavior((it) => it.equals(Clip.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereClipBehavior(MatchProp<Clip> match) {
    return withDiagnosticProp<Clip>('clipBehavior', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where clipBehavior equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withClipBehavior(Clip.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withClipBehavior(Clip? value) {
    return withDiagnosticProp<Clip>(
        'clipBehavior', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scribbleEnabled matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereScribbleEnabled((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereScribbleEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('scribbleEnabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scribbleEnabled equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withScribbleEnabled(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withScribbleEnabled(bool? value) {
    return withDiagnosticProp<bool>('scribbleEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableIMEPersonalizedLearning matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereEnableIMEPersonalizedLearning((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereEnableIMEPersonalizedLearning(
      MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableIMEPersonalizedLearning', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableIMEPersonalizedLearning equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withEnableIMEPersonalizedLearning(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withEnableIMEPersonalizedLearning(bool? value) {
    return withDiagnosticProp<bool>('enableIMEPersonalizedLearning',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where spellCheckConfiguration matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereSpellCheckConfiguration((it) => it.equals(SpellCheckConfiguration())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereSpellCheckConfiguration(
      MatchProp<SpellCheckConfiguration> match) {
    return withDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where spellCheckConfiguration equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withSpellCheckConfiguration(SpellCheckConfiguration()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withSpellCheckConfiguration(
      SpellCheckConfiguration? value) {
    return withDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where contentCommitMimeTypes matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().whereContentCommitMimeTypes((it) => it.equals(['foo', 'bar'])).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> whereContentCommitMimeTypes(
      MatchProp<List<String>> match) {
    return withDiagnosticProp<List<String>>('contentCommitMimeTypes', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where contentCommitMimeTypes equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().withContentCommitMimeTypes(['foo', 'bar']).existsOnce();
  /// ```
  @useResult
  WidgetSelector<TextField> withContentCommitMimeTypes(List<String>? value) {
    return withDiagnosticProp<List<String>>('contentCommitMimeTypes',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [TextField] provided via [Diagnosticable.debugFillProperties]
extension TextFieldMatcher on WidgetMatcher<TextField> {
  /// Expects that controller of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasControllerWhere((it) => it.equals(TextEditingController()));
  /// ```
  WidgetMatcher<TextField> hasControllerWhere(
      MatchProp<TextEditingController> match) {
    return hasDiagnosticProp<TextEditingController>('controller', match);
  }

  /// Expects that controller of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasController(TextEditingController());
  /// ```
  WidgetMatcher<TextField> hasController(TextEditingController? value) {
    return hasDiagnosticProp<TextEditingController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasFocusNodeWhere((it) => it.equals(FocusNode()));
  /// ```
  WidgetMatcher<TextField> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasFocusNode(FocusNode());
  /// ```
  WidgetMatcher<TextField> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that undoController of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasUndoControllerWhere((it) => it.equals(UndoHistoryController()));
  /// ```
  WidgetMatcher<TextField> hasUndoControllerWhere(
      MatchProp<UndoHistoryController> match) {
    return hasDiagnosticProp<UndoHistoryController>('undoController', match);
  }

  /// Expects that undoController of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasUndoController(UndoHistoryController());
  /// ```
  WidgetMatcher<TextField> hasUndoController(UndoHistoryController? value) {
    return hasDiagnosticProp<UndoHistoryController>('undoController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enabled of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().isEnabledWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> isEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enabled', match);
  }

  /// Expects that enabled of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().isEnabled(true);
  /// ```
  WidgetMatcher<TextField> isEnabled(bool? value) {
    return hasDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that decoration of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasDecorationWhere((it) => it.equals(InputDecoration()));
  /// ```
  WidgetMatcher<TextField> hasDecorationWhere(
      MatchProp<InputDecoration> match) {
    return hasDiagnosticProp<InputDecoration>('decoration', match);
  }

  /// Expects that decoration of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasDecoration(InputDecoration());
  /// ```
  WidgetMatcher<TextField> hasDecoration(InputDecoration? value) {
    return hasDiagnosticProp<InputDecoration>(
        'decoration', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that keyboardType of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasKeyboardTypeWhere((it) => it.equals(TextInputType.text));
  /// ```
  WidgetMatcher<TextField> hasKeyboardTypeWhere(
      MatchProp<TextInputType> match) {
    return hasDiagnosticProp<TextInputType>('keyboardType', match);
  }

  /// Expects that keyboardType of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasKeyboardType(TextInputType.text);
  /// ```
  WidgetMatcher<TextField> hasKeyboardType(TextInputType? value) {
    return hasDiagnosticProp<TextInputType>(
        'keyboardType', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that style of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasStyleWhere((it) => it.equals(TextStyle()));
  /// ```
  WidgetMatcher<TextField> hasStyleWhere(MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('style', match);
  }

  /// Expects that style of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasStyle(TextStyle());
  /// ```
  WidgetMatcher<TextField> hasStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autofocus of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasAutofocusWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasAutofocusWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autofocus', match);
  }

  /// Expects that autofocus of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasAutofocus(true);
  /// ```
  WidgetMatcher<TextField> hasAutofocus(bool? value) {
    return hasDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that obscuringCharacter of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasObscuringCharacterWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<TextField> hasObscuringCharacterWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('obscuringCharacter', match);
  }

  /// Expects that obscuringCharacter of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasObscuringCharacter('foo');
  /// ```
  WidgetMatcher<TextField> hasObscuringCharacter(String? value) {
    return hasDiagnosticProp<String>('obscuringCharacter',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that obscureText of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasObscureTextWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasObscureTextWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('obscureText', match);
  }

  /// Expects that obscureText of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasObscureText(true);
  /// ```
  WidgetMatcher<TextField> hasObscureText(bool? value) {
    return hasDiagnosticProp<bool>(
        'obscureText', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autocorrect of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasAutocorrectWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasAutocorrectWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autocorrect', match);
  }

  /// Expects that autocorrect of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasAutocorrect(true);
  /// ```
  WidgetMatcher<TextField> hasAutocorrect(bool? value) {
    return hasDiagnosticProp<bool>(
        'autocorrect', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that smartDashesType of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSmartDashesTypeWhere((it) => it.equals(SmartDashesType.values.first));
  /// ```
  WidgetMatcher<TextField> hasSmartDashesTypeWhere(
      MatchProp<SmartDashesType> match) {
    return hasDiagnosticProp<SmartDashesType>('smartDashesType', match);
  }

  /// Expects that smartDashesType of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSmartDashesType(SmartDashesType.values.first);
  /// ```
  WidgetMatcher<TextField> hasSmartDashesType(SmartDashesType? value) {
    return hasDiagnosticProp<SmartDashesType>('smartDashesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that smartQuotesType of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSmartQuotesTypeWhere((it) => it.equals(SmartQuotesType.values.first));
  /// ```
  WidgetMatcher<TextField> hasSmartQuotesTypeWhere(
      MatchProp<SmartQuotesType> match) {
    return hasDiagnosticProp<SmartQuotesType>('smartQuotesType', match);
  }

  /// Expects that smartQuotesType of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSmartQuotesType(SmartQuotesType.values.first);
  /// ```
  WidgetMatcher<TextField> hasSmartQuotesType(SmartQuotesType? value) {
    return hasDiagnosticProp<SmartQuotesType>('smartQuotesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableSuggestions of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasEnableSuggestionsWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasEnableSuggestionsWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableSuggestions', match);
  }

  /// Expects that enableSuggestions of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasEnableSuggestions(true);
  /// ```
  WidgetMatcher<TextField> hasEnableSuggestions(bool? value) {
    return hasDiagnosticProp<bool>('enableSuggestions',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLines of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLinesWhere((it) => it.isGreaterThan(10));
  /// ```
  WidgetMatcher<TextField> hasMaxLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('maxLines', match);
  }

  /// Expects that maxLines of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLines(10);
  /// ```
  WidgetMatcher<TextField> hasMaxLines(int? value) {
    return hasDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minLines of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMinLinesWhere((it) => it.isGreaterThan(10));
  /// ```
  WidgetMatcher<TextField> hasMinLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('minLines', match);
  }

  /// Expects that minLines of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMinLines(10);
  /// ```
  WidgetMatcher<TextField> hasMinLines(int? value) {
    return hasDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that expands of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasExpandsWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasExpandsWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('expands', match);
  }

  /// Expects that expands of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasExpands(true);
  /// ```
  WidgetMatcher<TextField> hasExpands(bool? value) {
    return hasDiagnosticProp<bool>(
        'expands', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLength of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLengthWhere((it) => it.isGreaterThan(10));
  /// ```
  WidgetMatcher<TextField> hasMaxLengthWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('maxLength', match);
  }

  /// Expects that maxLength of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLength(10);
  /// ```
  WidgetMatcher<TextField> hasMaxLength(int? value) {
    return hasDiagnosticProp<int>(
        'maxLength', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLengthEnforcement of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLengthEnforcementWhere((it) => it.equals(MaxLengthEnforcement.values.first));
  /// ```
  WidgetMatcher<TextField> hasMaxLengthEnforcementWhere(
      MatchProp<MaxLengthEnforcement> match) {
    return hasDiagnosticProp<MaxLengthEnforcement>(
        'maxLengthEnforcement', match);
  }

  /// Expects that maxLengthEnforcement of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasMaxLengthEnforcement(MaxLengthEnforcement.values.first);
  /// ```
  WidgetMatcher<TextField> hasMaxLengthEnforcement(
      MaxLengthEnforcement? value) {
    return hasDiagnosticProp<MaxLengthEnforcement>('maxLengthEnforcement',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textInputAction of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextInputActionWhere((it) => it.equals(TextInputAction.values.first));
  /// ```
  WidgetMatcher<TextField> hasTextInputActionWhere(
      MatchProp<TextInputAction> match) {
    return hasDiagnosticProp<TextInputAction>('textInputAction', match);
  }

  /// Expects that textInputAction of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextInputAction(TextInputAction.values.first);
  /// ```
  WidgetMatcher<TextField> hasTextInputAction(TextInputAction? value) {
    return hasDiagnosticProp<TextInputAction>('textInputAction',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textCapitalization of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextCapitalizationWhere((it) => it.equals(TextCapitalization.values.first));
  /// ```
  WidgetMatcher<TextField> hasTextCapitalizationWhere(
      MatchProp<TextCapitalization> match) {
    return hasDiagnosticProp<TextCapitalization>('textCapitalization', match);
  }

  /// Expects that textCapitalization of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextCapitalization(TextCapitalization.values.first);
  /// ```
  WidgetMatcher<TextField> hasTextCapitalization(TextCapitalization? value) {
    return hasDiagnosticProp<TextCapitalization>('textCapitalization',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlign of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextAlignWhere((it) => it.equals(TextAlign.values.first));
  /// ```
  WidgetMatcher<TextField> hasTextAlignWhere(MatchProp<TextAlign> match) {
    return hasDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Expects that textAlign of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextAlign(TextAlign.values.first);
  /// ```
  WidgetMatcher<TextField> hasTextAlign(TextAlign? value) {
    return hasDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlignVertical of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextAlignVerticalWhere((it) => it.equals(TextAlignVertical.center));
  /// ```
  WidgetMatcher<TextField> hasTextAlignVerticalWhere(
      MatchProp<TextAlignVertical> match) {
    return hasDiagnosticProp<TextAlignVertical>('textAlignVertical', match);
  }

  /// Expects that textAlignVertical of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextAlignVertical(TextAlignVertical.center);
  /// ```
  WidgetMatcher<TextField> hasTextAlignVertical(TextAlignVertical? value) {
    return hasDiagnosticProp<TextAlignVertical>('textAlignVertical',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textDirection of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextDirectionWhere((it) => it.equals(TextDirection.values.first));
  /// ```
  WidgetMatcher<TextField> hasTextDirectionWhere(
      MatchProp<TextDirection> match) {
    return hasDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Expects that textDirection of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasTextDirection(TextDirection.values.first);
  /// ```
  WidgetMatcher<TextField> hasTextDirection(TextDirection? value) {
    return hasDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorWidth of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorWidthWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<TextField> hasCursorWidthWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('cursorWidth', match);
  }

  /// Expects that cursorWidth of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorWidth(10.5);
  /// ```
  WidgetMatcher<TextField> hasCursorWidth(double? value) {
    return hasDiagnosticProp<double>(
        'cursorWidth', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorHeight of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorHeightWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<TextField> hasCursorHeightWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('cursorHeight', match);
  }

  /// Expects that cursorHeight of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorHeight(10.5);
  /// ```
  WidgetMatcher<TextField> hasCursorHeight(double? value) {
    return hasDiagnosticProp<double>(
        'cursorHeight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorRadius of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorRadiusWhere((it) => it.equals(Radius.circular(10.0)));
  /// ```
  WidgetMatcher<TextField> hasCursorRadiusWhere(MatchProp<Radius> match) {
    return hasDiagnosticProp<Radius>('cursorRadius', match);
  }

  /// Expects that cursorRadius of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorRadius(Radius.circular(10.0));
  /// ```
  WidgetMatcher<TextField> hasCursorRadius(Radius? value) {
    return hasDiagnosticProp<Radius>(
        'cursorRadius', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorOpacityAnimates of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorOpacityAnimatesWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasCursorOpacityAnimatesWhere(
      MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('cursorOpacityAnimates', match);
  }

  /// Expects that cursorOpacityAnimates of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorOpacityAnimates(true);
  /// ```
  WidgetMatcher<TextField> hasCursorOpacityAnimates(bool? value) {
    return hasDiagnosticProp<bool>('cursorOpacityAnimates',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorColor of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<TextField> hasCursorColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('cursorColor', match);
  }

  /// Expects that cursorColor of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasCursorColor(Colors.red);
  /// ```
  WidgetMatcher<TextField> hasCursorColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'cursorColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that keyboardAppearance of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasKeyboardAppearanceWhere((it) => it.equals(Brightness.values.first));
  /// ```
  WidgetMatcher<TextField> hasKeyboardAppearanceWhere(
      MatchProp<Brightness> match) {
    return hasDiagnosticProp<Brightness>('keyboardAppearance', match);
  }

  /// Expects that keyboardAppearance of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasKeyboardAppearance(Brightness.values.first);
  /// ```
  WidgetMatcher<TextField> hasKeyboardAppearance(Brightness? value) {
    return hasDiagnosticProp<Brightness>('keyboardAppearance',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollPadding of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollPaddingWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<TextField> hasScrollPaddingWhere(
      MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('scrollPadding', match);
  }

  /// Expects that scrollPadding of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollPadding(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<TextField> hasScrollPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('scrollPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectionEnabled of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSelectionEnabledWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasSelectionEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('selectionEnabled', match);
  }

  /// Expects that selectionEnabled of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSelectionEnabled(true);
  /// ```
  WidgetMatcher<TextField> hasSelectionEnabled(bool? value) {
    return hasDiagnosticProp<bool>('selectionEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectionControls of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSelectionControlsWhere((it) => it.equals(MaterialTextSelectionControls()));
  /// ```
  WidgetMatcher<TextField> hasSelectionControlsWhere(
      MatchProp<TextSelectionControls> match) {
    return hasDiagnosticProp<TextSelectionControls>('selectionControls', match);
  }

  /// Expects that selectionControls of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSelectionControls(MaterialTextSelectionControls());
  /// ```
  WidgetMatcher<TextField> hasSelectionControls(TextSelectionControls? value) {
    return hasDiagnosticProp<TextSelectionControls>('selectionControls',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollController of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollControllerWhere((it) => it.equals(ScrollController()));
  /// ```
  WidgetMatcher<TextField> hasScrollControllerWhere(
      MatchProp<ScrollController> match) {
    return hasDiagnosticProp<ScrollController>('scrollController', match);
  }

  /// Expects that scrollController of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollController(ScrollController());
  /// ```
  WidgetMatcher<TextField> hasScrollController(ScrollController? value) {
    return hasDiagnosticProp<ScrollController>('scrollController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollPhysics of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollPhysicsWhere((it) => it.equals(BouncingScrollPhysics()));
  /// ```
  WidgetMatcher<TextField> hasScrollPhysicsWhere(
      MatchProp<ScrollPhysics> match) {
    return hasDiagnosticProp<ScrollPhysics>('scrollPhysics', match);
  }

  /// Expects that scrollPhysics of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScrollPhysics(BouncingScrollPhysics());
  /// ```
  WidgetMatcher<TextField> hasScrollPhysics(ScrollPhysics? value) {
    return hasDiagnosticProp<ScrollPhysics>('scrollPhysics',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that clipBehavior of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasClipBehaviorWhere((it) => it.equals(Clip.values.first));
  /// ```
  WidgetMatcher<TextField> hasClipBehaviorWhere(MatchProp<Clip> match) {
    return hasDiagnosticProp<Clip>('clipBehavior', match);
  }

  /// Expects that clipBehavior of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasClipBehavior(Clip.values.first);
  /// ```
  WidgetMatcher<TextField> hasClipBehavior(Clip? value) {
    return hasDiagnosticProp<Clip>(
        'clipBehavior', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scribbleEnabled of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScribbleEnabledWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasScribbleEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('scribbleEnabled', match);
  }

  /// Expects that scribbleEnabled of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasScribbleEnabled(true);
  /// ```
  WidgetMatcher<TextField> hasScribbleEnabled(bool? value) {
    return hasDiagnosticProp<bool>('scribbleEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableIMEPersonalizedLearning of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasEnableIMEPersonalizedLearningWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<TextField> hasEnableIMEPersonalizedLearningWhere(
      MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableIMEPersonalizedLearning', match);
  }

  /// Expects that enableIMEPersonalizedLearning of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasEnableIMEPersonalizedLearning(true);
  /// ```
  WidgetMatcher<TextField> hasEnableIMEPersonalizedLearning(bool? value) {
    return hasDiagnosticProp<bool>('enableIMEPersonalizedLearning',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that spellCheckConfiguration of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSpellCheckConfigurationWhere((it) => it.equals(SpellCheckConfiguration()));
  /// ```
  WidgetMatcher<TextField> hasSpellCheckConfigurationWhere(
      MatchProp<SpellCheckConfiguration> match) {
    return hasDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration', match);
  }

  /// Expects that spellCheckConfiguration of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasSpellCheckConfiguration(SpellCheckConfiguration());
  /// ```
  WidgetMatcher<TextField> hasSpellCheckConfiguration(
      SpellCheckConfiguration? value) {
    return hasDiagnosticProp<SpellCheckConfiguration>('spellCheckConfiguration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that contentCommitMimeTypes of [TextField] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasContentCommitMimeTypesWhere((it) => it.equals(['foo', 'bar']));
  /// ```
  WidgetMatcher<TextField> hasContentCommitMimeTypesWhere(
      MatchProp<List<String>> match) {
    return hasDiagnosticProp<List<String>>('contentCommitMimeTypes', match);
  }

  /// Expects that contentCommitMimeTypes of [TextField] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<TextField>().existsOnce().hasContentCommitMimeTypes(['foo', 'bar']);
  /// ```
  WidgetMatcher<TextField> hasContentCommitMimeTypes(List<String>? value) {
    return hasDiagnosticProp<List<String>>('contentCommitMimeTypes',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension TextFieldGetter on WidgetMatcher<TextField> {
  /// Returns the controller of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextEditingController getController() {
    return getDiagnosticProp<TextEditingController>('controller');
  }

  /// Returns the focusNode of the matched [TextField] via [Widget.toDiagnosticsNode]
  FocusNode getFocusNode() {
    return getDiagnosticProp<FocusNode>('focusNode');
  }

  /// Returns the undoController of the matched [TextField] via [Widget.toDiagnosticsNode]
  UndoHistoryController getUndoController() {
    return getDiagnosticProp<UndoHistoryController>('undoController');
  }

  /// Returns the enabled of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getEnabled() {
    return getDiagnosticProp<bool>('enabled');
  }

  /// Returns the decoration of the matched [TextField] via [Widget.toDiagnosticsNode]
  InputDecoration getDecoration() {
    return getDiagnosticProp<InputDecoration>('decoration');
  }

  /// Returns the keyboardType of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextInputType getKeyboardType() {
    return getDiagnosticProp<TextInputType>('keyboardType');
  }

  /// Returns the style of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextStyle getStyle() {
    return getDiagnosticProp<TextStyle>('style');
  }

  /// Returns the autofocus of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getAutofocus() {
    return getDiagnosticProp<bool>('autofocus');
  }

  /// Returns the obscuringCharacter of the matched [TextField] via [Widget.toDiagnosticsNode]
  String getObscuringCharacter() {
    return getDiagnosticProp<String>('obscuringCharacter');
  }

  /// Returns the obscureText of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getObscureText() {
    return getDiagnosticProp<bool>('obscureText');
  }

  /// Returns the autocorrect of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getAutocorrect() {
    return getDiagnosticProp<bool>('autocorrect');
  }

  /// Returns the smartDashesType of the matched [TextField] via [Widget.toDiagnosticsNode]
  SmartDashesType getSmartDashesType() {
    return getDiagnosticProp<SmartDashesType>('smartDashesType');
  }

  /// Returns the smartQuotesType of the matched [TextField] via [Widget.toDiagnosticsNode]
  SmartQuotesType getSmartQuotesType() {
    return getDiagnosticProp<SmartQuotesType>('smartQuotesType');
  }

  /// Returns the enableSuggestions of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getEnableSuggestions() {
    return getDiagnosticProp<bool>('enableSuggestions');
  }

  /// Returns the maxLines of the matched [TextField] via [Widget.toDiagnosticsNode]
  int getMaxLines() {
    return getDiagnosticProp<int>('maxLines');
  }

  /// Returns the minLines of the matched [TextField] via [Widget.toDiagnosticsNode]
  int getMinLines() {
    return getDiagnosticProp<int>('minLines');
  }

  /// Returns the expands of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getExpands() {
    return getDiagnosticProp<bool>('expands');
  }

  /// Returns the maxLength of the matched [TextField] via [Widget.toDiagnosticsNode]
  int getMaxLength() {
    return getDiagnosticProp<int>('maxLength');
  }

  /// Returns the maxLengthEnforcement of the matched [TextField] via [Widget.toDiagnosticsNode]
  MaxLengthEnforcement getMaxLengthEnforcement() {
    return getDiagnosticProp<MaxLengthEnforcement>('maxLengthEnforcement');
  }

  /// Returns the textInputAction of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextInputAction getTextInputAction() {
    return getDiagnosticProp<TextInputAction>('textInputAction');
  }

  /// Returns the textCapitalization of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextCapitalization getTextCapitalization() {
    return getDiagnosticProp<TextCapitalization>('textCapitalization');
  }

  /// Returns the textAlign of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextAlign getTextAlign() {
    return getDiagnosticProp<TextAlign>('textAlign');
  }

  /// Returns the textAlignVertical of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextAlignVertical getTextAlignVertical() {
    return getDiagnosticProp<TextAlignVertical>('textAlignVertical');
  }

  /// Returns the textDirection of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextDirection getTextDirection() {
    return getDiagnosticProp<TextDirection>('textDirection');
  }

  /// Returns the cursorWidth of the matched [TextField] via [Widget.toDiagnosticsNode]
  double getCursorWidth() {
    return getDiagnosticProp<double>('cursorWidth');
  }

  /// Returns the cursorHeight of the matched [TextField] via [Widget.toDiagnosticsNode]
  double getCursorHeight() {
    return getDiagnosticProp<double>('cursorHeight');
  }

  /// Returns the cursorRadius of the matched [TextField] via [Widget.toDiagnosticsNode]
  Radius getCursorRadius() {
    return getDiagnosticProp<Radius>('cursorRadius');
  }

  /// Returns the cursorOpacityAnimates of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getCursorOpacityAnimates() {
    return getDiagnosticProp<bool>('cursorOpacityAnimates');
  }

  /// Returns the cursorColor of the matched [TextField] via [Widget.toDiagnosticsNode]
  Color getCursorColor() {
    return getDiagnosticProp<Color>('cursorColor');
  }

  /// Returns the keyboardAppearance of the matched [TextField] via [Widget.toDiagnosticsNode]
  Brightness getKeyboardAppearance() {
    return getDiagnosticProp<Brightness>('keyboardAppearance');
  }

  /// Returns the scrollPadding of the matched [TextField] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getScrollPadding() {
    return getDiagnosticProp<EdgeInsetsGeometry>('scrollPadding');
  }

  /// Returns the selectionEnabled of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getSelectionEnabled() {
    return getDiagnosticProp<bool>('selectionEnabled');
  }

  /// Returns the selectionControls of the matched [TextField] via [Widget.toDiagnosticsNode]
  TextSelectionControls getSelectionControls() {
    return getDiagnosticProp<TextSelectionControls>('selectionControls');
  }

  /// Returns the scrollController of the matched [TextField] via [Widget.toDiagnosticsNode]
  ScrollController getScrollController() {
    return getDiagnosticProp<ScrollController>('scrollController');
  }

  /// Returns the scrollPhysics of the matched [TextField] via [Widget.toDiagnosticsNode]
  ScrollPhysics getScrollPhysics() {
    return getDiagnosticProp<ScrollPhysics>('scrollPhysics');
  }

  /// Returns the clipBehavior of the matched [TextField] via [Widget.toDiagnosticsNode]
  Clip getClipBehavior() {
    return getDiagnosticProp<Clip>('clipBehavior');
  }

  /// Returns the scribbleEnabled of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getScribbleEnabled() {
    return getDiagnosticProp<bool>('scribbleEnabled');
  }

  /// Returns the enableIMEPersonalizedLearning of the matched [TextField] via [Widget.toDiagnosticsNode]
  bool getEnableIMEPersonalizedLearning() {
    return getDiagnosticProp<bool>('enableIMEPersonalizedLearning');
  }

  /// Returns the spellCheckConfiguration of the matched [TextField] via [Widget.toDiagnosticsNode]
  SpellCheckConfiguration getSpellCheckConfiguration() {
    return getDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration');
  }

  /// Returns the contentCommitMimeTypes of the matched [TextField] via [Widget.toDiagnosticsNode]
  List<String> getContentCommitMimeTypes() {
    return getDiagnosticProp<List<String>>('contentCommitMimeTypes');
  }
}
