// ignore_for_file: require_trailing_commas
// coverage:ignore-file

import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:spot/spot.dart';

/// Matchers for [TextField] auto-generated by spot
///
/// ```dart
/// spot<TextField>().printMatchers();
/// ```
/// Matchers for the properties of [TextField] provided via [Diagnosticable.debugFillProperties]
extension TextFieldMatcher on WidgetMatcher<TextField> {
  /// Expects that controller of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasControllerWhere(
      MatchProp<TextEditingController> match) {
    return hasDiagnosticProp<TextEditingController>('controller', match);
  }

  /// Expects that controller of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasController(TextEditingController? value) {
    return hasDiagnosticProp<TextEditingController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that undoController of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasUndoControllerWhere(
      MatchProp<UndoHistoryController> match) {
    return hasDiagnosticProp<UndoHistoryController>('undoController', match);
  }

  /// Expects that undoController of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasUndoController(UndoHistoryController? value) {
    return hasDiagnosticProp<UndoHistoryController>('undoController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enabled of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> isEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enabled', match);
  }

  /// Expects that enabled of [TextField] equals (==) [value]
  WidgetMatcher<TextField> isEnabled(bool? value) {
    return hasDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that decoration of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasDecorationWhere(
      MatchProp<InputDecoration> match) {
    return hasDiagnosticProp<InputDecoration>('decoration', match);
  }

  /// Expects that decoration of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasDecoration(InputDecoration? value) {
    return hasDiagnosticProp<InputDecoration>(
        'decoration', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that keyboardType of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasKeyboardTypeWhere(
      MatchProp<TextInputType> match) {
    return hasDiagnosticProp<TextInputType>('keyboardType', match);
  }

  /// Expects that keyboardType of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasKeyboardType(TextInputType? value) {
    return hasDiagnosticProp<TextInputType>(
        'keyboardType', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that style of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasStyleWhere(MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('style', match);
  }

  /// Expects that style of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autofocus of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasAutofocusWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autofocus', match);
  }

  /// Expects that autofocus of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasAutofocus(bool? value) {
    return hasDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that obscuringCharacter of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasObscuringCharacterWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('obscuringCharacter', match);
  }

  /// Expects that obscuringCharacter of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasObscuringCharacter(String? value) {
    return hasDiagnosticProp<String>('obscuringCharacter',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that obscureText of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasObscureTextWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('obscureText', match);
  }

  /// Expects that obscureText of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasObscureText(bool? value) {
    return hasDiagnosticProp<bool>(
        'obscureText', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autocorrect of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasAutocorrectWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autocorrect', match);
  }

  /// Expects that autocorrect of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasAutocorrect(bool? value) {
    return hasDiagnosticProp<bool>(
        'autocorrect', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that smartDashesType of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasSmartDashesTypeWhere(
      MatchProp<SmartDashesType> match) {
    return hasDiagnosticProp<SmartDashesType>('smartDashesType', match);
  }

  /// Expects that smartDashesType of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasSmartDashesType(SmartDashesType? value) {
    return hasDiagnosticProp<SmartDashesType>('smartDashesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that smartQuotesType of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasSmartQuotesTypeWhere(
      MatchProp<SmartQuotesType> match) {
    return hasDiagnosticProp<SmartQuotesType>('smartQuotesType', match);
  }

  /// Expects that smartQuotesType of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasSmartQuotesType(SmartQuotesType? value) {
    return hasDiagnosticProp<SmartQuotesType>('smartQuotesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableSuggestions of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasEnableSuggestionsWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableSuggestions', match);
  }

  /// Expects that enableSuggestions of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasEnableSuggestions(bool? value) {
    return hasDiagnosticProp<bool>('enableSuggestions',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLines of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasMaxLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('maxLines', match);
  }

  /// Expects that maxLines of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasMaxLines(int? value) {
    return hasDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minLines of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasMinLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('minLines', match);
  }

  /// Expects that minLines of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasMinLines(int? value) {
    return hasDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that expands of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasExpandsWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('expands', match);
  }

  /// Expects that expands of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasExpands(bool? value) {
    return hasDiagnosticProp<bool>(
        'expands', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLength of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasMaxLengthWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('maxLength', match);
  }

  /// Expects that maxLength of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasMaxLength(int? value) {
    return hasDiagnosticProp<int>(
        'maxLength', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLengthEnforcement of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasMaxLengthEnforcementWhere(
      MatchProp<MaxLengthEnforcement> match) {
    return hasDiagnosticProp<MaxLengthEnforcement>(
        'maxLengthEnforcement', match);
  }

  /// Expects that maxLengthEnforcement of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasMaxLengthEnforcement(
      MaxLengthEnforcement? value) {
    return hasDiagnosticProp<MaxLengthEnforcement>('maxLengthEnforcement',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textInputAction of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasTextInputActionWhere(
      MatchProp<TextInputAction> match) {
    return hasDiagnosticProp<TextInputAction>('textInputAction', match);
  }

  /// Expects that textInputAction of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasTextInputAction(TextInputAction? value) {
    return hasDiagnosticProp<TextInputAction>('textInputAction',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textCapitalization of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasTextCapitalizationWhere(
      MatchProp<TextCapitalization> match) {
    return hasDiagnosticProp<TextCapitalization>('textCapitalization', match);
  }

  /// Expects that textCapitalization of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasTextCapitalization(TextCapitalization? value) {
    return hasDiagnosticProp<TextCapitalization>('textCapitalization',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlign of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasTextAlignWhere(MatchProp<TextAlign> match) {
    return hasDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Expects that textAlign of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasTextAlign(TextAlign? value) {
    return hasDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlignVertical of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasTextAlignVerticalWhere(
      MatchProp<TextAlignVertical> match) {
    return hasDiagnosticProp<TextAlignVertical>('textAlignVertical', match);
  }

  /// Expects that textAlignVertical of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasTextAlignVertical(TextAlignVertical? value) {
    return hasDiagnosticProp<TextAlignVertical>('textAlignVertical',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textDirection of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasTextDirectionWhere(
      MatchProp<TextDirection> match) {
    return hasDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Expects that textDirection of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasTextDirection(TextDirection? value) {
    return hasDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorWidth of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasCursorWidthWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('cursorWidth', match);
  }

  /// Expects that cursorWidth of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasCursorWidth(double? value) {
    return hasDiagnosticProp<double>(
        'cursorWidth', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorHeight of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasCursorHeightWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('cursorHeight', match);
  }

  /// Expects that cursorHeight of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasCursorHeight(double? value) {
    return hasDiagnosticProp<double>(
        'cursorHeight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorRadius of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasCursorRadiusWhere(MatchProp<Radius> match) {
    return hasDiagnosticProp<Radius>('cursorRadius', match);
  }

  /// Expects that cursorRadius of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasCursorRadius(Radius? value) {
    return hasDiagnosticProp<Radius>(
        'cursorRadius', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorOpacityAnimates of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasCursorOpacityAnimatesWhere(
      MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('cursorOpacityAnimates', match);
  }

  /// Expects that cursorOpacityAnimates of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasCursorOpacityAnimates(bool? value) {
    return hasDiagnosticProp<bool>('cursorOpacityAnimates',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that cursorColor of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasCursorColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('cursorColor', match);
  }

  /// Expects that cursorColor of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasCursorColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'cursorColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that keyboardAppearance of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasKeyboardAppearanceWhere(
      MatchProp<Brightness> match) {
    return hasDiagnosticProp<Brightness>('keyboardAppearance', match);
  }

  /// Expects that keyboardAppearance of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasKeyboardAppearance(Brightness? value) {
    return hasDiagnosticProp<Brightness>('keyboardAppearance',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollPadding of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasScrollPaddingWhere(
      MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('scrollPadding', match);
  }

  /// Expects that scrollPadding of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasScrollPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('scrollPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectionEnabled of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasSelectionEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('selectionEnabled', match);
  }

  /// Expects that selectionEnabled of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasSelectionEnabled(bool? value) {
    return hasDiagnosticProp<bool>('selectionEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectionControls of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasSelectionControlsWhere(
      MatchProp<TextSelectionControls> match) {
    return hasDiagnosticProp<TextSelectionControls>('selectionControls', match);
  }

  /// Expects that selectionControls of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasSelectionControls(TextSelectionControls? value) {
    return hasDiagnosticProp<TextSelectionControls>('selectionControls',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollController of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasScrollControllerWhere(
      MatchProp<ScrollController> match) {
    return hasDiagnosticProp<ScrollController>('scrollController', match);
  }

  /// Expects that scrollController of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasScrollController(ScrollController? value) {
    return hasDiagnosticProp<ScrollController>('scrollController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scrollPhysics of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasScrollPhysicsWhere(
      MatchProp<ScrollPhysics> match) {
    return hasDiagnosticProp<ScrollPhysics>('scrollPhysics', match);
  }

  /// Expects that scrollPhysics of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasScrollPhysics(ScrollPhysics? value) {
    return hasDiagnosticProp<ScrollPhysics>('scrollPhysics',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that clipBehavior of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasClipBehaviorWhere(MatchProp<Clip> match) {
    return hasDiagnosticProp<Clip>('clipBehavior', match);
  }

  /// Expects that clipBehavior of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasClipBehavior(Clip? value) {
    return hasDiagnosticProp<Clip>(
        'clipBehavior', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that scribbleEnabled of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasScribbleEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('scribbleEnabled', match);
  }

  /// Expects that scribbleEnabled of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasScribbleEnabled(bool? value) {
    return hasDiagnosticProp<bool>('scribbleEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableIMEPersonalizedLearning of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasEnableIMEPersonalizedLearningWhere(
      MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableIMEPersonalizedLearning', match);
  }

  /// Expects that enableIMEPersonalizedLearning of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasEnableIMEPersonalizedLearning(bool? value) {
    return hasDiagnosticProp<bool>('enableIMEPersonalizedLearning',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that spellCheckConfiguration of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasSpellCheckConfigurationWhere(
      MatchProp<SpellCheckConfiguration> match) {
    return hasDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration', match);
  }

  /// Expects that spellCheckConfiguration of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasSpellCheckConfiguration(
      SpellCheckConfiguration? value) {
    return hasDiagnosticProp<SpellCheckConfiguration>('spellCheckConfiguration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that contentCommitMimeTypes of [TextField] matches the condition in [match]
  WidgetMatcher<TextField> hasContentCommitMimeTypesWhere(
      MatchProp<List<String>> match) {
    return hasDiagnosticProp<List<String>>('contentCommitMimeTypes', match);
  }

  /// Expects that contentCommitMimeTypes of [TextField] equals (==) [value]
  WidgetMatcher<TextField> hasContentCommitMimeTypes(List<String>? value) {
    return hasDiagnosticProp<List<String>>('contentCommitMimeTypes',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Allows filtering [TextField] by the properties provided via [Diagnosticable.debugFillProperties]
extension TextFieldSelector on WidgetSelector<TextField> {
  /// Creates a [WidgetSelector] that finds all [TextField] where controller matches the condition
  @useResult
  WidgetSelector<TextField> whereController(
      MatchProp<TextEditingController> match) {
    return withDiagnosticProp<TextEditingController>('controller', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where controller equals (==) [value]
  @useResult
  WidgetSelector<TextField> withController(TextEditingController? value) {
    return withDiagnosticProp<TextEditingController>(
        'controller', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where focusNode matches the condition
  @useResult
  WidgetSelector<TextField> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where focusNode equals (==) [value]
  @useResult
  WidgetSelector<TextField> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where undoController matches the condition
  @useResult
  WidgetSelector<TextField> whereUndoController(
      MatchProp<UndoHistoryController> match) {
    return withDiagnosticProp<UndoHistoryController>('undoController', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where undoController equals (==) [value]
  @useResult
  WidgetSelector<TextField> withUndoController(UndoHistoryController? value) {
    return withDiagnosticProp<UndoHistoryController>('undoController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enabled matches the condition
  @useResult
  WidgetSelector<TextField> whereEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enabled equals (==) [value]
  @useResult
  WidgetSelector<TextField> withEnabled(bool? value) {
    return withDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where decoration matches the condition
  @useResult
  WidgetSelector<TextField> whereDecoration(MatchProp<InputDecoration> match) {
    return withDiagnosticProp<InputDecoration>('decoration', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where decoration equals (==) [value]
  @useResult
  WidgetSelector<TextField> withDecoration(InputDecoration? value) {
    return withDiagnosticProp<InputDecoration>(
        'decoration', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardType matches the condition
  @useResult
  WidgetSelector<TextField> whereKeyboardType(MatchProp<TextInputType> match) {
    return withDiagnosticProp<TextInputType>('keyboardType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardType equals (==) [value]
  @useResult
  WidgetSelector<TextField> withKeyboardType(TextInputType? value) {
    return withDiagnosticProp<TextInputType>(
        'keyboardType', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where style matches the condition
  @useResult
  WidgetSelector<TextField> whereStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('style', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where style equals (==) [value]
  @useResult
  WidgetSelector<TextField> withStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autofocus matches the condition
  @useResult
  WidgetSelector<TextField> whereAutofocus(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autofocus', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autofocus equals (==) [value]
  @useResult
  WidgetSelector<TextField> withAutofocus(bool? value) {
    return withDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscuringCharacter matches the condition
  @useResult
  WidgetSelector<TextField> whereObscuringCharacter(MatchProp<String> match) {
    return withDiagnosticProp<String>('obscuringCharacter', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscuringCharacter equals (==) [value]
  @useResult
  WidgetSelector<TextField> withObscuringCharacter(String? value) {
    return withDiagnosticProp<String>('obscuringCharacter',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscureText matches the condition
  @useResult
  WidgetSelector<TextField> whereObscureText(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('obscureText', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where obscureText equals (==) [value]
  @useResult
  WidgetSelector<TextField> withObscureText(bool? value) {
    return withDiagnosticProp<bool>(
        'obscureText', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autocorrect matches the condition
  @useResult
  WidgetSelector<TextField> whereAutocorrect(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autocorrect', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where autocorrect equals (==) [value]
  @useResult
  WidgetSelector<TextField> withAutocorrect(bool? value) {
    return withDiagnosticProp<bool>(
        'autocorrect', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartDashesType matches the condition
  @useResult
  WidgetSelector<TextField> whereSmartDashesType(
      MatchProp<SmartDashesType> match) {
    return withDiagnosticProp<SmartDashesType>('smartDashesType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartDashesType equals (==) [value]
  @useResult
  WidgetSelector<TextField> withSmartDashesType(SmartDashesType? value) {
    return withDiagnosticProp<SmartDashesType>('smartDashesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartQuotesType matches the condition
  @useResult
  WidgetSelector<TextField> whereSmartQuotesType(
      MatchProp<SmartQuotesType> match) {
    return withDiagnosticProp<SmartQuotesType>('smartQuotesType', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where smartQuotesType equals (==) [value]
  @useResult
  WidgetSelector<TextField> withSmartQuotesType(SmartQuotesType? value) {
    return withDiagnosticProp<SmartQuotesType>('smartQuotesType',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableSuggestions matches the condition
  @useResult
  WidgetSelector<TextField> whereEnableSuggestions(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableSuggestions', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableSuggestions equals (==) [value]
  @useResult
  WidgetSelector<TextField> withEnableSuggestions(bool? value) {
    return withDiagnosticProp<bool>('enableSuggestions',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLines matches the condition
  @useResult
  WidgetSelector<TextField> whereMaxLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('maxLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLines equals (==) [value]
  @useResult
  WidgetSelector<TextField> withMaxLines(int? value) {
    return withDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where minLines matches the condition
  @useResult
  WidgetSelector<TextField> whereMinLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('minLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where minLines equals (==) [value]
  @useResult
  WidgetSelector<TextField> withMinLines(int? value) {
    return withDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where expands matches the condition
  @useResult
  WidgetSelector<TextField> whereExpands(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('expands', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where expands equals (==) [value]
  @useResult
  WidgetSelector<TextField> withExpands(bool? value) {
    return withDiagnosticProp<bool>(
        'expands', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLength matches the condition
  @useResult
  WidgetSelector<TextField> whereMaxLength(MatchProp<int> match) {
    return withDiagnosticProp<int>('maxLength', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLength equals (==) [value]
  @useResult
  WidgetSelector<TextField> withMaxLength(int? value) {
    return withDiagnosticProp<int>(
        'maxLength', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLengthEnforcement matches the condition
  @useResult
  WidgetSelector<TextField> whereMaxLengthEnforcement(
      MatchProp<MaxLengthEnforcement> match) {
    return withDiagnosticProp<MaxLengthEnforcement>(
        'maxLengthEnforcement', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where maxLengthEnforcement equals (==) [value]
  @useResult
  WidgetSelector<TextField> withMaxLengthEnforcement(
      MaxLengthEnforcement? value) {
    return withDiagnosticProp<MaxLengthEnforcement>('maxLengthEnforcement',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textInputAction matches the condition
  @useResult
  WidgetSelector<TextField> whereTextInputAction(
      MatchProp<TextInputAction> match) {
    return withDiagnosticProp<TextInputAction>('textInputAction', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textInputAction equals (==) [value]
  @useResult
  WidgetSelector<TextField> withTextInputAction(TextInputAction? value) {
    return withDiagnosticProp<TextInputAction>('textInputAction',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textCapitalization matches the condition
  @useResult
  WidgetSelector<TextField> whereTextCapitalization(
      MatchProp<TextCapitalization> match) {
    return withDiagnosticProp<TextCapitalization>('textCapitalization', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textCapitalization equals (==) [value]
  @useResult
  WidgetSelector<TextField> withTextCapitalization(TextCapitalization? value) {
    return withDiagnosticProp<TextCapitalization>('textCapitalization',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlign matches the condition
  @useResult
  WidgetSelector<TextField> whereTextAlign(MatchProp<TextAlign> match) {
    return withDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlign equals (==) [value]
  @useResult
  WidgetSelector<TextField> withTextAlign(TextAlign? value) {
    return withDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlignVertical matches the condition
  @useResult
  WidgetSelector<TextField> whereTextAlignVertical(
      MatchProp<TextAlignVertical> match) {
    return withDiagnosticProp<TextAlignVertical>('textAlignVertical', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textAlignVertical equals (==) [value]
  @useResult
  WidgetSelector<TextField> withTextAlignVertical(TextAlignVertical? value) {
    return withDiagnosticProp<TextAlignVertical>('textAlignVertical',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textDirection matches the condition
  @useResult
  WidgetSelector<TextField> whereTextDirection(MatchProp<TextDirection> match) {
    return withDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where textDirection equals (==) [value]
  @useResult
  WidgetSelector<TextField> withTextDirection(TextDirection? value) {
    return withDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorWidth matches the condition
  @useResult
  WidgetSelector<TextField> whereCursorWidth(MatchProp<double> match) {
    return withDiagnosticProp<double>('cursorWidth', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorWidth equals (==) [value]
  @useResult
  WidgetSelector<TextField> withCursorWidth(double? value) {
    return withDiagnosticProp<double>(
        'cursorWidth', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorHeight matches the condition
  @useResult
  WidgetSelector<TextField> whereCursorHeight(MatchProp<double> match) {
    return withDiagnosticProp<double>('cursorHeight', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorHeight equals (==) [value]
  @useResult
  WidgetSelector<TextField> withCursorHeight(double? value) {
    return withDiagnosticProp<double>(
        'cursorHeight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorRadius matches the condition
  @useResult
  WidgetSelector<TextField> whereCursorRadius(MatchProp<Radius> match) {
    return withDiagnosticProp<Radius>('cursorRadius', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorRadius equals (==) [value]
  @useResult
  WidgetSelector<TextField> withCursorRadius(Radius? value) {
    return withDiagnosticProp<Radius>(
        'cursorRadius', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorOpacityAnimates matches the condition
  @useResult
  WidgetSelector<TextField> whereCursorOpacityAnimates(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('cursorOpacityAnimates', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorOpacityAnimates equals (==) [value]
  @useResult
  WidgetSelector<TextField> withCursorOpacityAnimates(bool? value) {
    return withDiagnosticProp<bool>('cursorOpacityAnimates',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorColor matches the condition
  @useResult
  WidgetSelector<TextField> whereCursorColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('cursorColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where cursorColor equals (==) [value]
  @useResult
  WidgetSelector<TextField> withCursorColor(Color? value) {
    return withDiagnosticProp<Color>(
        'cursorColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardAppearance matches the condition
  @useResult
  WidgetSelector<TextField> whereKeyboardAppearance(
      MatchProp<Brightness> match) {
    return withDiagnosticProp<Brightness>('keyboardAppearance', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where keyboardAppearance equals (==) [value]
  @useResult
  WidgetSelector<TextField> withKeyboardAppearance(Brightness? value) {
    return withDiagnosticProp<Brightness>('keyboardAppearance',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPadding matches the condition
  @useResult
  WidgetSelector<TextField> whereScrollPadding(
      MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('scrollPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPadding equals (==) [value]
  @useResult
  WidgetSelector<TextField> withScrollPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>('scrollPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionEnabled matches the condition
  @useResult
  WidgetSelector<TextField> whereSelectionEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('selectionEnabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionEnabled equals (==) [value]
  @useResult
  WidgetSelector<TextField> withSelectionEnabled(bool? value) {
    return withDiagnosticProp<bool>('selectionEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionControls matches the condition
  @useResult
  WidgetSelector<TextField> whereSelectionControls(
      MatchProp<TextSelectionControls> match) {
    return withDiagnosticProp<TextSelectionControls>(
        'selectionControls', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where selectionControls equals (==) [value]
  @useResult
  WidgetSelector<TextField> withSelectionControls(
      TextSelectionControls? value) {
    return withDiagnosticProp<TextSelectionControls>('selectionControls',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollController matches the condition
  @useResult
  WidgetSelector<TextField> whereScrollController(
      MatchProp<ScrollController> match) {
    return withDiagnosticProp<ScrollController>('scrollController', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollController equals (==) [value]
  @useResult
  WidgetSelector<TextField> withScrollController(ScrollController? value) {
    return withDiagnosticProp<ScrollController>('scrollController',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPhysics matches the condition
  @useResult
  WidgetSelector<TextField> whereScrollPhysics(MatchProp<ScrollPhysics> match) {
    return withDiagnosticProp<ScrollPhysics>('scrollPhysics', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scrollPhysics equals (==) [value]
  @useResult
  WidgetSelector<TextField> withScrollPhysics(ScrollPhysics? value) {
    return withDiagnosticProp<ScrollPhysics>('scrollPhysics',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where clipBehavior matches the condition
  @useResult
  WidgetSelector<TextField> whereClipBehavior(MatchProp<Clip> match) {
    return withDiagnosticProp<Clip>('clipBehavior', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where clipBehavior equals (==) [value]
  @useResult
  WidgetSelector<TextField> withClipBehavior(Clip? value) {
    return withDiagnosticProp<Clip>(
        'clipBehavior', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scribbleEnabled matches the condition
  @useResult
  WidgetSelector<TextField> whereScribbleEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('scribbleEnabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where scribbleEnabled equals (==) [value]
  @useResult
  WidgetSelector<TextField> withScribbleEnabled(bool? value) {
    return withDiagnosticProp<bool>('scribbleEnabled',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableIMEPersonalizedLearning matches the condition
  @useResult
  WidgetSelector<TextField> whereEnableIMEPersonalizedLearning(
      MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableIMEPersonalizedLearning', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where enableIMEPersonalizedLearning equals (==) [value]
  @useResult
  WidgetSelector<TextField> withEnableIMEPersonalizedLearning(bool? value) {
    return withDiagnosticProp<bool>('enableIMEPersonalizedLearning',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where spellCheckConfiguration matches the condition
  @useResult
  WidgetSelector<TextField> whereSpellCheckConfiguration(
      MatchProp<SpellCheckConfiguration> match) {
    return withDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where spellCheckConfiguration equals (==) [value]
  @useResult
  WidgetSelector<TextField> withSpellCheckConfiguration(
      SpellCheckConfiguration? value) {
    return withDiagnosticProp<SpellCheckConfiguration>(
        'spellCheckConfiguration',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where contentCommitMimeTypes matches the condition
  @useResult
  WidgetSelector<TextField> whereContentCommitMimeTypes(
      MatchProp<List<String>> match) {
    return withDiagnosticProp<List<String>>('contentCommitMimeTypes', match);
  }

  /// Creates a [WidgetSelector] that finds all [TextField] where contentCommitMimeTypes equals (==) [value]
  @useResult
  WidgetSelector<TextField> withContentCommitMimeTypes(List<String>? value) {
    return withDiagnosticProp<List<String>>('contentCommitMimeTypes',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}
