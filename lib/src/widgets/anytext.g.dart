// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [AnyText] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<AnyText>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Allows filtering [AnyText] by the properties provided via [Diagnosticable.debugFillProperties]
extension AnyTextSelector on WidgetSelector<AnyText> {
  /// Creates a [WidgetSelector] that finds all [AnyText] where text matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereText((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereText(MatchProp<String> match) {
    return withDiagnosticProp<String>('text', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where text equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withText('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withText(String? value) {
    return withDiagnosticProp<String>(
        'text', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where textDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereTextDirection((it) => it.equals(TextDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereTextDirection(MatchProp<TextDirection> match) {
    return withDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where textDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withTextDirection(TextDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withTextDirection(TextDirection? value) {
    return withDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where textAlign matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereTextAlign((it) => it.equals(TextAlign.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereTextAlign(MatchProp<TextAlign> match) {
    return withDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where textAlign equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withTextAlign(TextAlign.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withTextAlign(TextAlign? value) {
    return withDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where selectionColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereSelectionColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereSelectionColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('selectionColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where selectionColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withSelectionColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withSelectionColor(Color? value) {
    return withDiagnosticProp<Color>('selectionColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where softWrap matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereSoftWrap((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereSoftWrap(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('softWrap', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where softWrap equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withSoftWrap(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withSoftWrap(bool? value) {
    return withDiagnosticProp<bool>(
        'softWrap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where overflow matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereOverflow((it) => it.equals(TextOverflow.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereOverflow(MatchProp<TextOverflow> match) {
    return withDiagnosticProp<TextOverflow>('overflow', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where overflow equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withOverflow(TextOverflow.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withOverflow(TextOverflow? value) {
    return withDiagnosticProp<TextOverflow>(
        'overflow', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where maxLines matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereMaxLines((it) => it.isGreaterThan(10)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereMaxLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('maxLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where maxLines equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withMaxLines(10).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withMaxLines(int? value) {
    return withDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where locale matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereLocale((it) => it.equals(Locale('en', 'US'))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereLocale(MatchProp<Locale> match) {
    return withDiagnosticProp<Locale>('locale', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where locale equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withLocale(Locale('en', 'US')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withLocale(Locale? value) {
    return withDiagnosticProp<Locale>(
        'locale', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where minLines matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereMinLines((it) => it.isGreaterThan(10)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereMinLines(MatchProp<int> match) {
    return withDiagnosticProp<int>('minLines', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where minLines equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withMinLines(10).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withMinLines(int? value) {
    return withDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontInherit matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontInherit((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontInherit(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('font_inherit', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontInherit equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontInherit(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontInherit(bool? value) {
    return withDiagnosticProp<bool>(
        'font_inherit', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('font_color', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontColor(Color? value) {
    return withDiagnosticProp<Color>(
        'font_color', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBackgroundColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontBackgroundColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontBackgroundColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('font_backgroundColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBackgroundColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontBackgroundColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontBackgroundColor(Color? value) {
    return withDiagnosticProp<Color>('font_backgroundColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontFamily matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontFamily((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontFamily(MatchProp<String> match) {
    return withDiagnosticProp<String>('font_family', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontFamily equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontFamily('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontFamily(String? value) {
    return withDiagnosticProp<String>(
        'font_family', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontFamilyFallback matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontFamilyFallback((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontFamilyFallback(MatchProp<String> match) {
    return withDiagnosticProp<String>('font_familyFallback', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontFamilyFallback equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontFamilyFallback('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontFamilyFallback(String? value) {
    return withDiagnosticProp<String>('font_familyFallback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontWeight matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontWeight((it) => it.equals(FontWeight.bold)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontWeight(MatchProp<FontWeight> match) {
    return withDiagnosticProp<FontWeight>('font_weight', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontWeight equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontWeight(FontWeight.bold).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontWeight(FontWeight? value) {
    return withDiagnosticProp<FontWeight>(
        'font_weight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontStyle matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontStyle((it) => it.equals(FontStyle.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontStyle(MatchProp<FontStyle> match) {
    return withDiagnosticProp<FontStyle>('font_style', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontStyle equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontStyle(FontStyle.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontStyle(FontStyle? value) {
    return withDiagnosticProp<FontStyle>(
        'font_style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLetterSpacing matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontLetterSpacing((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontLetterSpacing(MatchProp<double> match) {
    return withDiagnosticProp<double>('font_letterSpacing', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLetterSpacing equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontLetterSpacing(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontLetterSpacing(double? value) {
    return withDiagnosticProp<double>('font_letterSpacing',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontWordSpacing matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontWordSpacing((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontWordSpacing(MatchProp<double> match) {
    return withDiagnosticProp<double>('font_wordSpacing', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontWordSpacing equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontWordSpacing(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontWordSpacing(double? value) {
    return withDiagnosticProp<double>('font_wordSpacing',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBaseline matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontBaseline((it) => it.equals(TextBaseline.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontBaseline(MatchProp<TextBaseline> match) {
    return withDiagnosticProp<TextBaseline>('font_baseline', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBaseline equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontBaseline(TextBaseline.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontBaseline(TextBaseline? value) {
    return withDiagnosticProp<TextBaseline>('font_baseline',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontHeight matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontHeight((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontHeight(MatchProp<double> match) {
    return withDiagnosticProp<double>('font_height', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontHeight equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontHeight(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontHeight(double? value) {
    return withDiagnosticProp<double>(
        'font_height', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLeadingDistribution matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontLeadingDistribution((it) => it.equals(TextLeadingDistribution.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontLeadingDistribution(
      MatchProp<TextLeadingDistribution> match) {
    return withDiagnosticProp<TextLeadingDistribution>(
        'font_leadingDistribution', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLeadingDistribution equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontLeadingDistribution(TextLeadingDistribution.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontLeadingDistribution(
      TextLeadingDistribution? value) {
    return withDiagnosticProp<TextLeadingDistribution>(
        'font_leadingDistribution',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLocale matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontLocale((it) => it.equals(Locale('en', 'US'))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontLocale(MatchProp<Locale> match) {
    return withDiagnosticProp<Locale>('font_locale', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontLocale equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontLocale(Locale('en', 'US')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontLocale(Locale? value) {
    return withDiagnosticProp<Locale>(
        'font_locale', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontForeground matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontForeground((it) => it.equals(Paint())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontForeground(MatchProp<Paint> match) {
    return withDiagnosticProp<Paint>('font_foreground', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontForeground equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontForeground(Paint()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontForeground(Paint? value) {
    return withDiagnosticProp<Paint>('font_foreground',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBackground matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontBackground((it) => it.equals(Paint())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontBackground(MatchProp<Paint> match) {
    return withDiagnosticProp<Paint>('font_background', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontBackground equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontBackground(Paint()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontBackground(Paint? value) {
    return withDiagnosticProp<Paint>('font_background',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where inherit matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereInherit((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereInherit(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('inherit', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where inherit equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withInherit(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withInherit(bool? value) {
    return withDiagnosticProp<bool>(
        'inherit', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontSize matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().whereFontSize((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> whereFontSize(MatchProp<double> match) {
    return withDiagnosticProp<double>('font_size', match);
  }

  /// Creates a [WidgetSelector] that finds all [AnyText] where fontSize equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().withFontSize(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<AnyText> withFontSize(double? value) {
    return withDiagnosticProp<double>(
        'font_size', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [AnyText] provided via [Diagnosticable.debugFillProperties]
extension AnyTextMatcher on WidgetMatcher<AnyText> {
  /// Expects that text of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasTextWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<AnyText> hasTextWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('text', match);
  }

  /// Expects that text of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasText('foo');
  /// ```
  WidgetMatcher<AnyText> hasText(String? value) {
    return hasDiagnosticProp<String>(
        'text', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textDirection of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasTextDirectionWhere((it) => it.equals(TextDirection.values.first));
  /// ```
  WidgetMatcher<AnyText> hasTextDirectionWhere(MatchProp<TextDirection> match) {
    return hasDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Expects that textDirection of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasTextDirection(TextDirection.values.first);
  /// ```
  WidgetMatcher<AnyText> hasTextDirection(TextDirection? value) {
    return hasDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textAlign of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasTextAlignWhere((it) => it.equals(TextAlign.values.first));
  /// ```
  WidgetMatcher<AnyText> hasTextAlignWhere(MatchProp<TextAlign> match) {
    return hasDiagnosticProp<TextAlign>('textAlign', match);
  }

  /// Expects that textAlign of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasTextAlign(TextAlign.values.first);
  /// ```
  WidgetMatcher<AnyText> hasTextAlign(TextAlign? value) {
    return hasDiagnosticProp<TextAlign>(
        'textAlign', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectionColor of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasSelectionColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<AnyText> hasSelectionColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('selectionColor', match);
  }

  /// Expects that selectionColor of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasSelectionColor(Colors.red);
  /// ```
  WidgetMatcher<AnyText> hasSelectionColor(Color? value) {
    return hasDiagnosticProp<Color>('selectionColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that softWrap of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasSoftWrapWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<AnyText> hasSoftWrapWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('softWrap', match);
  }

  /// Expects that softWrap of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasSoftWrap(true);
  /// ```
  WidgetMatcher<AnyText> hasSoftWrap(bool? value) {
    return hasDiagnosticProp<bool>(
        'softWrap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that overflow of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasOverflowWhere((it) => it.equals(TextOverflow.values.first));
  /// ```
  WidgetMatcher<AnyText> hasOverflowWhere(MatchProp<TextOverflow> match) {
    return hasDiagnosticProp<TextOverflow>('overflow', match);
  }

  /// Expects that overflow of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasOverflow(TextOverflow.values.first);
  /// ```
  WidgetMatcher<AnyText> hasOverflow(TextOverflow? value) {
    return hasDiagnosticProp<TextOverflow>(
        'overflow', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that maxLines of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasMaxLinesWhere((it) => it.isGreaterThan(10));
  /// ```
  WidgetMatcher<AnyText> hasMaxLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('maxLines', match);
  }

  /// Expects that maxLines of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasMaxLines(10);
  /// ```
  WidgetMatcher<AnyText> hasMaxLines(int? value) {
    return hasDiagnosticProp<int>(
        'maxLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that locale of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasLocaleWhere((it) => it.equals(Locale('en', 'US')));
  /// ```
  WidgetMatcher<AnyText> hasLocaleWhere(MatchProp<Locale> match) {
    return hasDiagnosticProp<Locale>('locale', match);
  }

  /// Expects that locale of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasLocale(Locale('en', 'US'));
  /// ```
  WidgetMatcher<AnyText> hasLocale(Locale? value) {
    return hasDiagnosticProp<Locale>(
        'locale', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minLines of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasMinLinesWhere((it) => it.isGreaterThan(10));
  /// ```
  WidgetMatcher<AnyText> hasMinLinesWhere(MatchProp<int> match) {
    return hasDiagnosticProp<int>('minLines', match);
  }

  /// Expects that minLines of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasMinLines(10);
  /// ```
  WidgetMatcher<AnyText> hasMinLines(int? value) {
    return hasDiagnosticProp<int>(
        'minLines', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontInherit of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontInheritWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<AnyText> hasFontInheritWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('font_inherit', match);
  }

  /// Expects that fontInherit of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontInherit(true);
  /// ```
  WidgetMatcher<AnyText> hasFontInherit(bool? value) {
    return hasDiagnosticProp<bool>(
        'font_inherit', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontColor of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<AnyText> hasFontColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('font_color', match);
  }

  /// Expects that fontColor of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontColor(Colors.red);
  /// ```
  WidgetMatcher<AnyText> hasFontColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'font_color', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontBackgroundColor of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBackgroundColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<AnyText> hasFontBackgroundColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('font_backgroundColor', match);
  }

  /// Expects that fontBackgroundColor of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBackgroundColor(Colors.red);
  /// ```
  WidgetMatcher<AnyText> hasFontBackgroundColor(Color? value) {
    return hasDiagnosticProp<Color>('font_backgroundColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontFamily of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontFamilyWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<AnyText> hasFontFamilyWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('font_family', match);
  }

  /// Expects that fontFamily of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontFamily('foo');
  /// ```
  WidgetMatcher<AnyText> hasFontFamily(String? value) {
    return hasDiagnosticProp<String>(
        'font_family', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontFamilyFallback of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontFamilyFallbackWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<AnyText> hasFontFamilyFallbackWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('font_familyFallback', match);
  }

  /// Expects that fontFamilyFallback of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontFamilyFallback('foo');
  /// ```
  WidgetMatcher<AnyText> hasFontFamilyFallback(String? value) {
    return hasDiagnosticProp<String>('font_familyFallback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontWeight of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontWeightWhere((it) => it.equals(FontWeight.bold));
  /// ```
  WidgetMatcher<AnyText> hasFontWeightWhere(MatchProp<FontWeight> match) {
    return hasDiagnosticProp<FontWeight>('font_weight', match);
  }

  /// Expects that fontWeight of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontWeight(FontWeight.bold);
  /// ```
  WidgetMatcher<AnyText> hasFontWeight(FontWeight? value) {
    return hasDiagnosticProp<FontWeight>(
        'font_weight', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontStyle of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontStyleWhere((it) => it.equals(FontStyle.values.first));
  /// ```
  WidgetMatcher<AnyText> hasFontStyleWhere(MatchProp<FontStyle> match) {
    return hasDiagnosticProp<FontStyle>('font_style', match);
  }

  /// Expects that fontStyle of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontStyle(FontStyle.values.first);
  /// ```
  WidgetMatcher<AnyText> hasFontStyle(FontStyle? value) {
    return hasDiagnosticProp<FontStyle>(
        'font_style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontLetterSpacing of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLetterSpacingWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<AnyText> hasFontLetterSpacingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('font_letterSpacing', match);
  }

  /// Expects that fontLetterSpacing of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLetterSpacing(10.5);
  /// ```
  WidgetMatcher<AnyText> hasFontLetterSpacing(double? value) {
    return hasDiagnosticProp<double>('font_letterSpacing',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontWordSpacing of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontWordSpacingWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<AnyText> hasFontWordSpacingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('font_wordSpacing', match);
  }

  /// Expects that fontWordSpacing of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontWordSpacing(10.5);
  /// ```
  WidgetMatcher<AnyText> hasFontWordSpacing(double? value) {
    return hasDiagnosticProp<double>('font_wordSpacing',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontBaseline of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBaselineWhere((it) => it.equals(TextBaseline.values.first));
  /// ```
  WidgetMatcher<AnyText> hasFontBaselineWhere(MatchProp<TextBaseline> match) {
    return hasDiagnosticProp<TextBaseline>('font_baseline', match);
  }

  /// Expects that fontBaseline of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBaseline(TextBaseline.values.first);
  /// ```
  WidgetMatcher<AnyText> hasFontBaseline(TextBaseline? value) {
    return hasDiagnosticProp<TextBaseline>('font_baseline',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontHeight of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontHeightWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<AnyText> hasFontHeightWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('font_height', match);
  }

  /// Expects that fontHeight of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontHeight(10.5);
  /// ```
  WidgetMatcher<AnyText> hasFontHeight(double? value) {
    return hasDiagnosticProp<double>(
        'font_height', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontLeadingDistribution of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLeadingDistributionWhere((it) => it.equals(TextLeadingDistribution.values.first));
  /// ```
  WidgetMatcher<AnyText> hasFontLeadingDistributionWhere(
      MatchProp<TextLeadingDistribution> match) {
    return hasDiagnosticProp<TextLeadingDistribution>(
        'font_leadingDistribution', match);
  }

  /// Expects that fontLeadingDistribution of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLeadingDistribution(TextLeadingDistribution.values.first);
  /// ```
  WidgetMatcher<AnyText> hasFontLeadingDistribution(
      TextLeadingDistribution? value) {
    return hasDiagnosticProp<TextLeadingDistribution>(
        'font_leadingDistribution',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontLocale of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLocaleWhere((it) => it.equals(Locale('en', 'US')));
  /// ```
  WidgetMatcher<AnyText> hasFontLocaleWhere(MatchProp<Locale> match) {
    return hasDiagnosticProp<Locale>('font_locale', match);
  }

  /// Expects that fontLocale of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontLocale(Locale('en', 'US'));
  /// ```
  WidgetMatcher<AnyText> hasFontLocale(Locale? value) {
    return hasDiagnosticProp<Locale>(
        'font_locale', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontForeground of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontForegroundWhere((it) => it.equals(Paint()));
  /// ```
  WidgetMatcher<AnyText> hasFontForegroundWhere(MatchProp<Paint> match) {
    return hasDiagnosticProp<Paint>('font_foreground', match);
  }

  /// Expects that fontForeground of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontForeground(Paint());
  /// ```
  WidgetMatcher<AnyText> hasFontForeground(Paint? value) {
    return hasDiagnosticProp<Paint>('font_foreground',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontBackground of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBackgroundWhere((it) => it.equals(Paint()));
  /// ```
  WidgetMatcher<AnyText> hasFontBackgroundWhere(MatchProp<Paint> match) {
    return hasDiagnosticProp<Paint>('font_background', match);
  }

  /// Expects that fontBackground of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontBackground(Paint());
  /// ```
  WidgetMatcher<AnyText> hasFontBackground(Paint? value) {
    return hasDiagnosticProp<Paint>('font_background',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that inherit of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasInheritWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<AnyText> hasInheritWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('inherit', match);
  }

  /// Expects that inherit of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasInherit(true);
  /// ```
  WidgetMatcher<AnyText> hasInherit(bool? value) {
    return hasDiagnosticProp<bool>(
        'inherit', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that fontSize of [AnyText] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontSizeWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<AnyText> hasFontSizeWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('font_size', match);
  }

  /// Expects that fontSize of [AnyText] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<AnyText>().existsOnce().hasFontSize(10.5);
  /// ```
  WidgetMatcher<AnyText> hasFontSize(double? value) {
    return hasDiagnosticProp<double>(
        'font_size', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension AnyTextGetter on WidgetMatcher<AnyText> {
  /// Returns the text of the matched [AnyText] via [Widget.toDiagnosticsNode]
  String getText() {
    return getDiagnosticProp<String>('text');
  }

  /// Returns the textDirection of the matched [AnyText] via [Widget.toDiagnosticsNode]
  TextDirection getTextDirection() {
    return getDiagnosticProp<TextDirection>('textDirection');
  }

  /// Returns the textAlign of the matched [AnyText] via [Widget.toDiagnosticsNode]
  TextAlign getTextAlign() {
    return getDiagnosticProp<TextAlign>('textAlign');
  }

  /// Returns the selectionColor of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Color getSelectionColor() {
    return getDiagnosticProp<Color>('selectionColor');
  }

  /// Returns the softWrap of the matched [AnyText] via [Widget.toDiagnosticsNode]
  bool getSoftWrap() {
    return getDiagnosticProp<bool>('softWrap');
  }

  /// Returns the overflow of the matched [AnyText] via [Widget.toDiagnosticsNode]
  TextOverflow getOverflow() {
    return getDiagnosticProp<TextOverflow>('overflow');
  }

  /// Returns the maxLines of the matched [AnyText] via [Widget.toDiagnosticsNode]
  int getMaxLines() {
    return getDiagnosticProp<int>('maxLines');
  }

  /// Returns the locale of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Locale getLocale() {
    return getDiagnosticProp<Locale>('locale');
  }

  /// Returns the minLines of the matched [AnyText] via [Widget.toDiagnosticsNode]
  int getMinLines() {
    return getDiagnosticProp<int>('minLines');
  }

  /// Returns the fontInherit of the matched [AnyText] via [Widget.toDiagnosticsNode]
  bool getFontInherit() {
    return getDiagnosticProp<bool>('font_inherit');
  }

  /// Returns the fontColor of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Color getFontColor() {
    return getDiagnosticProp<Color>('font_color');
  }

  /// Returns the fontBackgroundColor of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Color getFontBackgroundColor() {
    return getDiagnosticProp<Color>('font_backgroundColor');
  }

  /// Returns the fontFamily of the matched [AnyText] via [Widget.toDiagnosticsNode]
  String getFontFamily() {
    return getDiagnosticProp<String>('font_family');
  }

  /// Returns the fontFamilyFallback of the matched [AnyText] via [Widget.toDiagnosticsNode]
  String getFontFamilyFallback() {
    return getDiagnosticProp<String>('font_familyFallback');
  }

  /// Returns the fontWeight of the matched [AnyText] via [Widget.toDiagnosticsNode]
  FontWeight getFontWeight() {
    return getDiagnosticProp<FontWeight>('font_weight');
  }

  /// Returns the fontStyle of the matched [AnyText] via [Widget.toDiagnosticsNode]
  FontStyle getFontStyle() {
    return getDiagnosticProp<FontStyle>('font_style');
  }

  /// Returns the fontLetterSpacing of the matched [AnyText] via [Widget.toDiagnosticsNode]
  double getFontLetterSpacing() {
    return getDiagnosticProp<double>('font_letterSpacing');
  }

  /// Returns the fontWordSpacing of the matched [AnyText] via [Widget.toDiagnosticsNode]
  double getFontWordSpacing() {
    return getDiagnosticProp<double>('font_wordSpacing');
  }

  /// Returns the fontBaseline of the matched [AnyText] via [Widget.toDiagnosticsNode]
  TextBaseline getFontBaseline() {
    return getDiagnosticProp<TextBaseline>('font_baseline');
  }

  /// Returns the fontHeight of the matched [AnyText] via [Widget.toDiagnosticsNode]
  double getFontHeight() {
    return getDiagnosticProp<double>('font_height');
  }

  /// Returns the fontLeadingDistribution of the matched [AnyText] via [Widget.toDiagnosticsNode]
  TextLeadingDistribution getFontLeadingDistribution() {
    return getDiagnosticProp<TextLeadingDistribution>(
        'font_leadingDistribution');
  }

  /// Returns the fontLocale of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Locale getFontLocale() {
    return getDiagnosticProp<Locale>('font_locale');
  }

  /// Returns the fontForeground of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Paint getFontForeground() {
    return getDiagnosticProp<Paint>('font_foreground');
  }

  /// Returns the fontBackground of the matched [AnyText] via [Widget.toDiagnosticsNode]
  Paint getFontBackground() {
    return getDiagnosticProp<Paint>('font_background');
  }

  /// Returns the inherit of the matched [AnyText] via [Widget.toDiagnosticsNode]
  bool getInherit() {
    return getDiagnosticProp<bool>('inherit');
  }

  /// Returns the fontSize of the matched [AnyText] via [Widget.toDiagnosticsNode]
  double getFontSize() {
    return getDiagnosticProp<double>('font_size');
  }
}
