// ignore_for_file: require_trailing_commas
// coverage:ignore-file

import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Matchers for [ListTile] auto-generated by spot
///
/// ```dart
/// spot<ListTile>().printMatchers();
/// ```
/// Matchers for the properties of [ListTile] provided via [Diagnosticable.debugFillProperties]
extension ListTileMatcher on WidgetMatcher<ListTile> {
  /// Expects that leading of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasLeadingWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('leading', match);
  }

  /// Expects that leading of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasLeading(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'leading', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that title of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTitleWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('title', match);
  }

  /// Expects that title of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTitle(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'title', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that subtitle of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasSubtitleWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('subtitle', match);
  }

  /// Expects that subtitle of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasSubtitle(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'subtitle', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that trailing of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTrailingWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('trailing', match);
  }

  /// Expects that trailing of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTrailing(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'trailing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that isThreeLine of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasIsThreeLineWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('isThreeLine', match);
  }

  /// Expects that isThreeLine of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasIsThreeLine(bool? value) {
    return hasDiagnosticProp<bool>(
        'isThreeLine', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that dense of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasDenseWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('dense', match);
  }

  /// Expects that dense of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasDense(bool? value) {
    return hasDiagnosticProp<bool>(
        'dense', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that visualDensity of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasVisualDensityWhere(
      MatchProp<VisualDensity> match) {
    return hasDiagnosticProp<VisualDensity>('visualDensity', match);
  }

  /// Expects that visualDensity of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasVisualDensity(VisualDensity? value) {
    return hasDiagnosticProp<VisualDensity>('visualDensity',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that shape of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasShapeWhere(MatchProp<ShapeBorder> match) {
    return hasDiagnosticProp<ShapeBorder>('shape', match);
  }

  /// Expects that shape of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasShape(ShapeBorder? value) {
    return hasDiagnosticProp<ShapeBorder>(
        'shape', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that style of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasStyleWhere(MatchProp<ListTileStyle> match) {
    return hasDiagnosticProp<ListTileStyle>('style', match);
  }

  /// Expects that style of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasStyle(ListTileStyle? value) {
    return hasDiagnosticProp<ListTileStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectedColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasSelectedColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('selectedColor', match);
  }

  /// Expects that selectedColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasSelectedColor(Color? value) {
    return hasDiagnosticProp<Color>('selectedColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that iconColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasIconColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('iconColor', match);
  }

  /// Expects that iconColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasIconColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'iconColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTextColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('textColor', match);
  }

  /// Expects that textColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTextColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'textColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that titleTextStyle of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTitleTextStyleWhere(MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('titleTextStyle', match);
  }

  /// Expects that titleTextStyle of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTitleTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('titleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that subtitleTextStyle of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasSubtitleTextStyleWhere(
      MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('subtitleTextStyle', match);
  }

  /// Expects that subtitleTextStyle of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasSubtitleTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('subtitleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that leadingAndTrailingTextStyle of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasLeadingAndTrailingTextStyleWhere(
      MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle', match);
  }

  /// Expects that leadingAndTrailingTextStyle of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasLeadingAndTrailingTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that contentPadding of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasContentPaddingWhere(
      MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('contentPadding', match);
  }

  /// Expects that contentPadding of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasContentPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('contentPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enabled of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> isEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enabled', match);
  }

  /// Expects that enabled of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> isEnabled(bool? value) {
    return hasDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that onTap of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasOnTapWhere(MatchProp<Function> match) {
    return hasDiagnosticProp<Function>('onTap', match);
  }

  /// Expects that onTap of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasOnTap(Function? value) {
    return hasDiagnosticProp<Function>(
        'onTap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that onLongPress of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasOnLongPressWhere(MatchProp<Function> match) {
    return hasDiagnosticProp<Function>('onLongPress', match);
  }

  /// Expects that onLongPress of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasOnLongPress(Function? value) {
    return hasDiagnosticProp<Function>(
        'onLongPress', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that mouseCursor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasMouseCursorWhere(MatchProp<MouseCursor> match) {
    return hasDiagnosticProp<MouseCursor>('mouseCursor', match);
  }

  /// Expects that mouseCursor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasMouseCursor(MouseCursor? value) {
    return hasDiagnosticProp<MouseCursor>(
        'mouseCursor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selected of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasSelectedWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('selected', match);
  }

  /// Expects that selected of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasSelected(bool? value) {
    return hasDiagnosticProp<bool>(
        'selected', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasFocusColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('focusColor', match);
  }

  /// Expects that focusColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasFocusColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that hoverColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasHoverColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('hoverColor', match);
  }

  /// Expects that hoverColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasHoverColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autofocus of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasAutofocusWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autofocus', match);
  }

  /// Expects that autofocus of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasAutofocus(bool? value) {
    return hasDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that tileColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTileColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('tileColor', match);
  }

  /// Expects that tileColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTileColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'tileColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectedTileColor of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasSelectedTileColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('selectedTileColor', match);
  }

  /// Expects that selectedTileColor of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasSelectedTileColor(Color? value) {
    return hasDiagnosticProp<Color>('selectedTileColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableFeedback of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasEnableFeedbackWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Expects that enableFeedback of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasEnableFeedback(bool? value) {
    return hasDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that horizontalTitleGap of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasHorizontalTitleGapWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('horizontalTitleGap', match);
  }

  /// Expects that horizontalTitleGap of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasHorizontalTitleGap(double? value) {
    return hasDiagnosticProp<double>('horizontalTitleGap',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minVerticalPadding of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasMinVerticalPaddingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('minVerticalPadding', match);
  }

  /// Expects that minVerticalPadding of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasMinVerticalPadding(double? value) {
    return hasDiagnosticProp<double>('minVerticalPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minLeadingWidth of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasMinLeadingWidthWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('minLeadingWidth', match);
  }

  /// Expects that minLeadingWidth of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasMinLeadingWidth(double? value) {
    return hasDiagnosticProp<double>('minLeadingWidth',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that titleAlignment of [ListTile] matches the condition in [match]
  WidgetMatcher<ListTile> hasTitleAlignmentWhere(
      MatchProp<ListTileTitleAlignment> match) {
    return hasDiagnosticProp<ListTileTitleAlignment>('titleAlignment', match);
  }

  /// Expects that titleAlignment of [ListTile] equals (==) [value]
  WidgetMatcher<ListTile> hasTitleAlignment(ListTileTitleAlignment? value) {
    return hasDiagnosticProp<ListTileTitleAlignment>('titleAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Allows filtering [ListTile] by the properties provided via [Diagnosticable.debugFillProperties]
extension ListTileSelector on WidgetSelector<ListTile> {
  /// Creates a [WidgetSelector] that finds all [ListTile] where leading matches the condition
  @useResult
  WidgetSelector<ListTile> whereLeading(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('leading', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leading equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withLeading(Widget? value) {
    return withDiagnosticProp<Widget>(
        'leading', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where title matches the condition
  @useResult
  WidgetSelector<ListTile> whereTitle(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('title', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where title equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTitle(Widget? value) {
    return withDiagnosticProp<Widget>(
        'title', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitle matches the condition
  @useResult
  WidgetSelector<ListTile> whereSubtitle(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('subtitle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitle equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withSubtitle(Widget? value) {
    return withDiagnosticProp<Widget>(
        'subtitle', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where trailing matches the condition
  @useResult
  WidgetSelector<ListTile> whereTrailing(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('trailing', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where trailing equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTrailing(Widget? value) {
    return withDiagnosticProp<Widget>(
        'trailing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where isThreeLine matches the condition
  @useResult
  WidgetSelector<ListTile> whereIsThreeLine(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('isThreeLine', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where isThreeLine equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withIsThreeLine(bool? value) {
    return withDiagnosticProp<bool>(
        'isThreeLine', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where dense matches the condition
  @useResult
  WidgetSelector<ListTile> whereDense(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('dense', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where dense equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withDense(bool? value) {
    return withDiagnosticProp<bool>(
        'dense', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where visualDensity matches the condition
  @useResult
  WidgetSelector<ListTile> whereVisualDensity(MatchProp<VisualDensity> match) {
    return withDiagnosticProp<VisualDensity>('visualDensity', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where visualDensity equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withVisualDensity(VisualDensity? value) {
    return withDiagnosticProp<VisualDensity>('visualDensity',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where shape matches the condition
  @useResult
  WidgetSelector<ListTile> whereShape(MatchProp<ShapeBorder> match) {
    return withDiagnosticProp<ShapeBorder>('shape', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where shape equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withShape(ShapeBorder? value) {
    return withDiagnosticProp<ShapeBorder>(
        'shape', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where style matches the condition
  @useResult
  WidgetSelector<ListTile> whereStyle(MatchProp<ListTileStyle> match) {
    return withDiagnosticProp<ListTileStyle>('style', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where style equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withStyle(ListTileStyle? value) {
    return withDiagnosticProp<ListTileStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereSelectedColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('selectedColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withSelectedColor(Color? value) {
    return withDiagnosticProp<Color>('selectedColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where iconColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereIconColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('iconColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where iconColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withIconColor(Color? value) {
    return withDiagnosticProp<Color>(
        'iconColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where textColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereTextColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('textColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where textColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTextColor(Color? value) {
    return withDiagnosticProp<Color>(
        'textColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleTextStyle matches the condition
  @useResult
  WidgetSelector<ListTile> whereTitleTextStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('titleTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleTextStyle equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTitleTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('titleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitleTextStyle matches the condition
  @useResult
  WidgetSelector<ListTile> whereSubtitleTextStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('subtitleTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitleTextStyle equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withSubtitleTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('subtitleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leadingAndTrailingTextStyle matches the condition
  @useResult
  WidgetSelector<ListTile> whereLeadingAndTrailingTextStyle(
      MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leadingAndTrailingTextStyle equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withLeadingAndTrailingTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where contentPadding matches the condition
  @useResult
  WidgetSelector<ListTile> whereContentPadding(
      MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('contentPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where contentPadding equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withContentPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>('contentPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enabled matches the condition
  @useResult
  WidgetSelector<ListTile> whereEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enabled equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withEnabled(bool? value) {
    return withDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onTap matches the condition
  @useResult
  WidgetSelector<ListTile> whereOnTap(MatchProp<Function> match) {
    return withDiagnosticProp<Function>('onTap', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onTap equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withOnTap(Function? value) {
    return withDiagnosticProp<Function>(
        'onTap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onLongPress matches the condition
  @useResult
  WidgetSelector<ListTile> whereOnLongPress(MatchProp<Function> match) {
    return withDiagnosticProp<Function>('onLongPress', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onLongPress equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withOnLongPress(Function? value) {
    return withDiagnosticProp<Function>(
        'onLongPress', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where mouseCursor matches the condition
  @useResult
  WidgetSelector<ListTile> whereMouseCursor(MatchProp<MouseCursor> match) {
    return withDiagnosticProp<MouseCursor>('mouseCursor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where mouseCursor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withMouseCursor(MouseCursor? value) {
    return withDiagnosticProp<MouseCursor>(
        'mouseCursor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selected matches the condition
  @useResult
  WidgetSelector<ListTile> whereSelected(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('selected', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selected equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withSelected(bool? value) {
    return withDiagnosticProp<bool>(
        'selected', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereFocusColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('focusColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withFocusColor(Color? value) {
    return withDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where hoverColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereHoverColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('hoverColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where hoverColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withHoverColor(Color? value) {
    return withDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusNode matches the condition
  @useResult
  WidgetSelector<ListTile> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusNode equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where autofocus matches the condition
  @useResult
  WidgetSelector<ListTile> whereAutofocus(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autofocus', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where autofocus equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withAutofocus(bool? value) {
    return withDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where tileColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereTileColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('tileColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where tileColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTileColor(Color? value) {
    return withDiagnosticProp<Color>(
        'tileColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedTileColor matches the condition
  @useResult
  WidgetSelector<ListTile> whereSelectedTileColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('selectedTileColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedTileColor equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withSelectedTileColor(Color? value) {
    return withDiagnosticProp<Color>('selectedTileColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enableFeedback matches the condition
  @useResult
  WidgetSelector<ListTile> whereEnableFeedback(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enableFeedback equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withEnableFeedback(bool? value) {
    return withDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where horizontalTitleGap matches the condition
  @useResult
  WidgetSelector<ListTile> whereHorizontalTitleGap(MatchProp<double> match) {
    return withDiagnosticProp<double>('horizontalTitleGap', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where horizontalTitleGap equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withHorizontalTitleGap(double? value) {
    return withDiagnosticProp<double>('horizontalTitleGap',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minVerticalPadding matches the condition
  @useResult
  WidgetSelector<ListTile> whereMinVerticalPadding(MatchProp<double> match) {
    return withDiagnosticProp<double>('minVerticalPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minVerticalPadding equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withMinVerticalPadding(double? value) {
    return withDiagnosticProp<double>('minVerticalPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minLeadingWidth matches the condition
  @useResult
  WidgetSelector<ListTile> whereMinLeadingWidth(MatchProp<double> match) {
    return withDiagnosticProp<double>('minLeadingWidth', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minLeadingWidth equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withMinLeadingWidth(double? value) {
    return withDiagnosticProp<double>('minLeadingWidth',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleAlignment matches the condition
  @useResult
  WidgetSelector<ListTile> whereTitleAlignment(
      MatchProp<ListTileTitleAlignment> match) {
    return withDiagnosticProp<ListTileTitleAlignment>('titleAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleAlignment equals (==) [value]
  @useResult
  WidgetSelector<ListTile> withTitleAlignment(ListTileTitleAlignment? value) {
    return withDiagnosticProp<ListTileTitleAlignment>('titleAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}
