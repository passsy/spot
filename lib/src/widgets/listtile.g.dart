// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [ListTile] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<ListTile>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Allows filtering [ListTile] by the properties provided via [Diagnosticable.debugFillProperties]
extension ListTileSelector on WidgetSelector<ListTile> {
  /// Creates a [WidgetSelector] that finds all [ListTile] where leading matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereLeading((it) => it.equals(Container())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereLeading(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('leading', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leading equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withLeading(Container()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withLeading(Widget? value) {
    return withDiagnosticProp<Widget>(
        'leading', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where title matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTitle((it) => it.equals(Container())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTitle(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('title', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where title equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTitle(Container()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTitle(Widget? value) {
    return withDiagnosticProp<Widget>(
        'title', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitle matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereSubtitle((it) => it.equals(Container())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereSubtitle(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('subtitle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitle equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withSubtitle(Container()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withSubtitle(Widget? value) {
    return withDiagnosticProp<Widget>(
        'subtitle', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where trailing matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTrailing((it) => it.equals(Container())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTrailing(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('trailing', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where trailing equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTrailing(Container()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTrailing(Widget? value) {
    return withDiagnosticProp<Widget>(
        'trailing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where isThreeLine matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereIsThreeLine((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereIsThreeLine(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('isThreeLine', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where isThreeLine equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withIsThreeLine(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withIsThreeLine(bool? value) {
    return withDiagnosticProp<bool>(
        'isThreeLine', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where dense matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereDense((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereDense(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('dense', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where dense equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withDense(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withDense(bool? value) {
    return withDiagnosticProp<bool>(
        'dense', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where visualDensity matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereVisualDensity((it) => it.equals(VisualDensity(horizontal: 1.0,vertical: 1.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereVisualDensity(MatchProp<VisualDensity> match) {
    return withDiagnosticProp<VisualDensity>('visualDensity', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where visualDensity equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withVisualDensity(VisualDensity(horizontal: 1.0,vertical: 1.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withVisualDensity(VisualDensity? value) {
    return withDiagnosticProp<VisualDensity>('visualDensity',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where shape matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereShape((it) => it.equals(RoundedRectangleBorder())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereShape(MatchProp<ShapeBorder> match) {
    return withDiagnosticProp<ShapeBorder>('shape', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where shape equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withShape(RoundedRectangleBorder()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withShape(ShapeBorder? value) {
    return withDiagnosticProp<ShapeBorder>(
        'shape', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where style matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereStyle((it) => it.equals(ListTileStyle.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereStyle(MatchProp<ListTileStyle> match) {
    return withDiagnosticProp<ListTileStyle>('style', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where style equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withStyle(ListTileStyle.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withStyle(ListTileStyle? value) {
    return withDiagnosticProp<ListTileStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereSelectedColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereSelectedColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('selectedColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withSelectedColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withSelectedColor(Color? value) {
    return withDiagnosticProp<Color>('selectedColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where iconColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereIconColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereIconColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('iconColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where iconColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withIconColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withIconColor(Color? value) {
    return withDiagnosticProp<Color>(
        'iconColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where textColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTextColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTextColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('textColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where textColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTextColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTextColor(Color? value) {
    return withDiagnosticProp<Color>(
        'textColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleTextStyle matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTitleTextStyle((it) => it.equals(TextStyle())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTitleTextStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('titleTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleTextStyle equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTitleTextStyle(TextStyle()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTitleTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('titleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitleTextStyle matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereSubtitleTextStyle((it) => it.equals(TextStyle())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereSubtitleTextStyle(MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('subtitleTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where subtitleTextStyle equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withSubtitleTextStyle(TextStyle()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withSubtitleTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('subtitleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leadingAndTrailingTextStyle matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereLeadingAndTrailingTextStyle((it) => it.equals(TextStyle())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereLeadingAndTrailingTextStyle(
      MatchProp<TextStyle> match) {
    return withDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where leadingAndTrailingTextStyle equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withLeadingAndTrailingTextStyle(TextStyle()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withLeadingAndTrailingTextStyle(TextStyle? value) {
    return withDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where contentPadding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereContentPadding((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereContentPadding(
      MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('contentPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where contentPadding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withContentPadding(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withContentPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>('contentPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enabled matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereEnabled((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereEnabled(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enabled', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enabled equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withEnabled(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withEnabled(bool? value) {
    return withDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onTap matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereOnTap((it) => it.equals(() {})).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereOnTap(MatchProp<Function> match) {
    return withDiagnosticProp<Function>('onTap', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onTap equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withOnTap(() {}).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withOnTap(Function? value) {
    return withDiagnosticProp<Function>(
        'onTap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onLongPress matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereOnLongPress((it) => it.equals(() {})).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereOnLongPress(MatchProp<Function> match) {
    return withDiagnosticProp<Function>('onLongPress', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where onLongPress equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withOnLongPress(() {}).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withOnLongPress(Function? value) {
    return withDiagnosticProp<Function>(
        'onLongPress', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where mouseCursor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereMouseCursor((it) => it.equals(SystemMouseCursors.click)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereMouseCursor(MatchProp<MouseCursor> match) {
    return withDiagnosticProp<MouseCursor>('mouseCursor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where mouseCursor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withMouseCursor(SystemMouseCursors.click).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withMouseCursor(MouseCursor? value) {
    return withDiagnosticProp<MouseCursor>(
        'mouseCursor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selected matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereSelected((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereSelected(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('selected', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selected equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withSelected(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withSelected(bool? value) {
    return withDiagnosticProp<bool>(
        'selected', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereFocusColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereFocusColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('focusColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withFocusColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withFocusColor(Color? value) {
    return withDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where hoverColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereHoverColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereHoverColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('hoverColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where hoverColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withHoverColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withHoverColor(Color? value) {
    return withDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusNode matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereFocusNode((it) => it.equals(FocusNode())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where focusNode equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withFocusNode(FocusNode()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where autofocus matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereAutofocus((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereAutofocus(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('autofocus', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where autofocus equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withAutofocus(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withAutofocus(bool? value) {
    return withDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where tileColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTileColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTileColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('tileColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where tileColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTileColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTileColor(Color? value) {
    return withDiagnosticProp<Color>(
        'tileColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedTileColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereSelectedTileColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereSelectedTileColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('selectedTileColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where selectedTileColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withSelectedTileColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withSelectedTileColor(Color? value) {
    return withDiagnosticProp<Color>('selectedTileColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enableFeedback matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereEnableFeedback((it) => it.isTrue()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereEnableFeedback(MatchProp<bool> match) {
    return withDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where enableFeedback equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withEnableFeedback(true).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withEnableFeedback(bool? value) {
    return withDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where horizontalTitleGap matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereHorizontalTitleGap((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereHorizontalTitleGap(MatchProp<double> match) {
    return withDiagnosticProp<double>('horizontalTitleGap', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where horizontalTitleGap equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withHorizontalTitleGap(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withHorizontalTitleGap(double? value) {
    return withDiagnosticProp<double>('horizontalTitleGap',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minVerticalPadding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereMinVerticalPadding((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereMinVerticalPadding(MatchProp<double> match) {
    return withDiagnosticProp<double>('minVerticalPadding', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minVerticalPadding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withMinVerticalPadding(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withMinVerticalPadding(double? value) {
    return withDiagnosticProp<double>('minVerticalPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minLeadingWidth matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereMinLeadingWidth((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereMinLeadingWidth(MatchProp<double> match) {
    return withDiagnosticProp<double>('minLeadingWidth', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where minLeadingWidth equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withMinLeadingWidth(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withMinLeadingWidth(double? value) {
    return withDiagnosticProp<double>('minLeadingWidth',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleAlignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().whereTitleAlignment((it) => it.equals(ListTileTitleAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> whereTitleAlignment(
      MatchProp<ListTileTitleAlignment> match) {
    return withDiagnosticProp<ListTileTitleAlignment>('titleAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [ListTile] where titleAlignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().withTitleAlignment(ListTileTitleAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<ListTile> withTitleAlignment(ListTileTitleAlignment? value) {
    return withDiagnosticProp<ListTileTitleAlignment>('titleAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [ListTile] provided via [Diagnosticable.debugFillProperties]
extension ListTileMatcher on WidgetMatcher<ListTile> {
  /// Expects that leading of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasLeadingWhere((it) => it.equals(Container()));
  /// ```
  WidgetMatcher<ListTile> hasLeadingWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('leading', match);
  }

  /// Expects that leading of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasLeading(Container());
  /// ```
  WidgetMatcher<ListTile> hasLeading(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'leading', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that title of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitleWhere((it) => it.equals(Container()));
  /// ```
  WidgetMatcher<ListTile> hasTitleWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('title', match);
  }

  /// Expects that title of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitle(Container());
  /// ```
  WidgetMatcher<ListTile> hasTitle(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'title', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that subtitle of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSubtitleWhere((it) => it.equals(Container()));
  /// ```
  WidgetMatcher<ListTile> hasSubtitleWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('subtitle', match);
  }

  /// Expects that subtitle of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSubtitle(Container());
  /// ```
  WidgetMatcher<ListTile> hasSubtitle(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'subtitle', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that trailing of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTrailingWhere((it) => it.equals(Container()));
  /// ```
  WidgetMatcher<ListTile> hasTrailingWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('trailing', match);
  }

  /// Expects that trailing of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTrailing(Container());
  /// ```
  WidgetMatcher<ListTile> hasTrailing(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'trailing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that isThreeLine of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasIsThreeLineWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> hasIsThreeLineWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('isThreeLine', match);
  }

  /// Expects that isThreeLine of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasIsThreeLine(true);
  /// ```
  WidgetMatcher<ListTile> hasIsThreeLine(bool? value) {
    return hasDiagnosticProp<bool>(
        'isThreeLine', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that dense of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasDenseWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> hasDenseWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('dense', match);
  }

  /// Expects that dense of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasDense(true);
  /// ```
  WidgetMatcher<ListTile> hasDense(bool? value) {
    return hasDiagnosticProp<bool>(
        'dense', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that visualDensity of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasVisualDensityWhere((it) => it.equals(VisualDensity(horizontal: 1.0,vertical: 1.0)));
  /// ```
  WidgetMatcher<ListTile> hasVisualDensityWhere(
      MatchProp<VisualDensity> match) {
    return hasDiagnosticProp<VisualDensity>('visualDensity', match);
  }

  /// Expects that visualDensity of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasVisualDensity(VisualDensity(horizontal: 1.0,vertical: 1.0));
  /// ```
  WidgetMatcher<ListTile> hasVisualDensity(VisualDensity? value) {
    return hasDiagnosticProp<VisualDensity>('visualDensity',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that shape of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasShapeWhere((it) => it.equals(RoundedRectangleBorder()));
  /// ```
  WidgetMatcher<ListTile> hasShapeWhere(MatchProp<ShapeBorder> match) {
    return hasDiagnosticProp<ShapeBorder>('shape', match);
  }

  /// Expects that shape of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasShape(RoundedRectangleBorder());
  /// ```
  WidgetMatcher<ListTile> hasShape(ShapeBorder? value) {
    return hasDiagnosticProp<ShapeBorder>(
        'shape', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that style of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasStyleWhere((it) => it.equals(ListTileStyle.values.first));
  /// ```
  WidgetMatcher<ListTile> hasStyleWhere(MatchProp<ListTileStyle> match) {
    return hasDiagnosticProp<ListTileStyle>('style', match);
  }

  /// Expects that style of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasStyle(ListTileStyle.values.first);
  /// ```
  WidgetMatcher<ListTile> hasStyle(ListTileStyle? value) {
    return hasDiagnosticProp<ListTileStyle>(
        'style', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectedColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelectedColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasSelectedColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('selectedColor', match);
  }

  /// Expects that selectedColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelectedColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasSelectedColor(Color? value) {
    return hasDiagnosticProp<Color>('selectedColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that iconColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasIconColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasIconColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('iconColor', match);
  }

  /// Expects that iconColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasIconColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasIconColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'iconColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTextColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasTextColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('textColor', match);
  }

  /// Expects that textColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTextColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasTextColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'textColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that titleTextStyle of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitleTextStyleWhere((it) => it.equals(TextStyle()));
  /// ```
  WidgetMatcher<ListTile> hasTitleTextStyleWhere(MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('titleTextStyle', match);
  }

  /// Expects that titleTextStyle of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitleTextStyle(TextStyle());
  /// ```
  WidgetMatcher<ListTile> hasTitleTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('titleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that subtitleTextStyle of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSubtitleTextStyleWhere((it) => it.equals(TextStyle()));
  /// ```
  WidgetMatcher<ListTile> hasSubtitleTextStyleWhere(
      MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('subtitleTextStyle', match);
  }

  /// Expects that subtitleTextStyle of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSubtitleTextStyle(TextStyle());
  /// ```
  WidgetMatcher<ListTile> hasSubtitleTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('subtitleTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that leadingAndTrailingTextStyle of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasLeadingAndTrailingTextStyleWhere((it) => it.equals(TextStyle()));
  /// ```
  WidgetMatcher<ListTile> hasLeadingAndTrailingTextStyleWhere(
      MatchProp<TextStyle> match) {
    return hasDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle', match);
  }

  /// Expects that leadingAndTrailingTextStyle of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasLeadingAndTrailingTextStyle(TextStyle());
  /// ```
  WidgetMatcher<ListTile> hasLeadingAndTrailingTextStyle(TextStyle? value) {
    return hasDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that contentPadding of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasContentPaddingWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<ListTile> hasContentPaddingWhere(
      MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('contentPadding', match);
  }

  /// Expects that contentPadding of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasContentPadding(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<ListTile> hasContentPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('contentPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enabled of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().isEnabledWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> isEnabledWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enabled', match);
  }

  /// Expects that enabled of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().isEnabled(true);
  /// ```
  WidgetMatcher<ListTile> isEnabled(bool? value) {
    return hasDiagnosticProp<bool>(
        'enabled', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that onTap of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasOnTapWhere((it) => it.equals(() {}));
  /// ```
  WidgetMatcher<ListTile> hasOnTapWhere(MatchProp<Function> match) {
    return hasDiagnosticProp<Function>('onTap', match);
  }

  /// Expects that onTap of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasOnTap(() {});
  /// ```
  WidgetMatcher<ListTile> hasOnTap(Function? value) {
    return hasDiagnosticProp<Function>(
        'onTap', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that onLongPress of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasOnLongPressWhere((it) => it.equals(() {}));
  /// ```
  WidgetMatcher<ListTile> hasOnLongPressWhere(MatchProp<Function> match) {
    return hasDiagnosticProp<Function>('onLongPress', match);
  }

  /// Expects that onLongPress of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasOnLongPress(() {});
  /// ```
  WidgetMatcher<ListTile> hasOnLongPress(Function? value) {
    return hasDiagnosticProp<Function>(
        'onLongPress', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that mouseCursor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMouseCursorWhere((it) => it.equals(SystemMouseCursors.click));
  /// ```
  WidgetMatcher<ListTile> hasMouseCursorWhere(MatchProp<MouseCursor> match) {
    return hasDiagnosticProp<MouseCursor>('mouseCursor', match);
  }

  /// Expects that mouseCursor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMouseCursor(SystemMouseCursors.click);
  /// ```
  WidgetMatcher<ListTile> hasMouseCursor(MouseCursor? value) {
    return hasDiagnosticProp<MouseCursor>(
        'mouseCursor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selected of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelectedWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> hasSelectedWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('selected', match);
  }

  /// Expects that selected of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelected(true);
  /// ```
  WidgetMatcher<ListTile> hasSelected(bool? value) {
    return hasDiagnosticProp<bool>(
        'selected', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasFocusColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasFocusColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('focusColor', match);
  }

  /// Expects that focusColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasFocusColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasFocusColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that hoverColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasHoverColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasHoverColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('hoverColor', match);
  }

  /// Expects that hoverColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasHoverColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasHoverColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasFocusNodeWhere((it) => it.equals(FocusNode()));
  /// ```
  WidgetMatcher<ListTile> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasFocusNode(FocusNode());
  /// ```
  WidgetMatcher<ListTile> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that autofocus of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasAutofocusWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> hasAutofocusWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('autofocus', match);
  }

  /// Expects that autofocus of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasAutofocus(true);
  /// ```
  WidgetMatcher<ListTile> hasAutofocus(bool? value) {
    return hasDiagnosticProp<bool>(
        'autofocus', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that tileColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTileColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasTileColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('tileColor', match);
  }

  /// Expects that tileColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTileColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasTileColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'tileColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that selectedTileColor of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelectedTileColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<ListTile> hasSelectedTileColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('selectedTileColor', match);
  }

  /// Expects that selectedTileColor of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasSelectedTileColor(Colors.red);
  /// ```
  WidgetMatcher<ListTile> hasSelectedTileColor(Color? value) {
    return hasDiagnosticProp<Color>('selectedTileColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that enableFeedback of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasEnableFeedbackWhere((it) => it.isTrue());
  /// ```
  WidgetMatcher<ListTile> hasEnableFeedbackWhere(MatchProp<bool> match) {
    return hasDiagnosticProp<bool>('enableFeedback', match);
  }

  /// Expects that enableFeedback of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasEnableFeedback(true);
  /// ```
  WidgetMatcher<ListTile> hasEnableFeedback(bool? value) {
    return hasDiagnosticProp<bool>('enableFeedback',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that horizontalTitleGap of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasHorizontalTitleGapWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<ListTile> hasHorizontalTitleGapWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('horizontalTitleGap', match);
  }

  /// Expects that horizontalTitleGap of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasHorizontalTitleGap(10.5);
  /// ```
  WidgetMatcher<ListTile> hasHorizontalTitleGap(double? value) {
    return hasDiagnosticProp<double>('horizontalTitleGap',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minVerticalPadding of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMinVerticalPaddingWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<ListTile> hasMinVerticalPaddingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('minVerticalPadding', match);
  }

  /// Expects that minVerticalPadding of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMinVerticalPadding(10.5);
  /// ```
  WidgetMatcher<ListTile> hasMinVerticalPadding(double? value) {
    return hasDiagnosticProp<double>('minVerticalPadding',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that minLeadingWidth of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMinLeadingWidthWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<ListTile> hasMinLeadingWidthWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('minLeadingWidth', match);
  }

  /// Expects that minLeadingWidth of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasMinLeadingWidth(10.5);
  /// ```
  WidgetMatcher<ListTile> hasMinLeadingWidth(double? value) {
    return hasDiagnosticProp<double>('minLeadingWidth',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that titleAlignment of [ListTile] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitleAlignmentWhere((it) => it.equals(ListTileTitleAlignment.values.first));
  /// ```
  WidgetMatcher<ListTile> hasTitleAlignmentWhere(
      MatchProp<ListTileTitleAlignment> match) {
    return hasDiagnosticProp<ListTileTitleAlignment>('titleAlignment', match);
  }

  /// Expects that titleAlignment of [ListTile] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<ListTile>().existsOnce().hasTitleAlignment(ListTileTitleAlignment.values.first);
  /// ```
  WidgetMatcher<ListTile> hasTitleAlignment(ListTileTitleAlignment? value) {
    return hasDiagnosticProp<ListTileTitleAlignment>('titleAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension ListTileGetter on WidgetMatcher<ListTile> {
  /// Returns the leading of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Widget getLeading() {
    return getDiagnosticProp<Widget>('leading');
  }

  /// Returns the title of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Widget getTitle() {
    return getDiagnosticProp<Widget>('title');
  }

  /// Returns the subtitle of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Widget getSubtitle() {
    return getDiagnosticProp<Widget>('subtitle');
  }

  /// Returns the trailing of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Widget getTrailing() {
    return getDiagnosticProp<Widget>('trailing');
  }

  /// Returns the isThreeLine of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getIsThreeLine() {
    return getDiagnosticProp<bool>('isThreeLine');
  }

  /// Returns the dense of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getDense() {
    return getDiagnosticProp<bool>('dense');
  }

  /// Returns the visualDensity of the matched [ListTile] via [Widget.toDiagnosticsNode]
  VisualDensity getVisualDensity() {
    return getDiagnosticProp<VisualDensity>('visualDensity');
  }

  /// Returns the shape of the matched [ListTile] via [Widget.toDiagnosticsNode]
  ShapeBorder getShape() {
    return getDiagnosticProp<ShapeBorder>('shape');
  }

  /// Returns the style of the matched [ListTile] via [Widget.toDiagnosticsNode]
  ListTileStyle getStyle() {
    return getDiagnosticProp<ListTileStyle>('style');
  }

  /// Returns the selectedColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getSelectedColor() {
    return getDiagnosticProp<Color>('selectedColor');
  }

  /// Returns the iconColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getIconColor() {
    return getDiagnosticProp<Color>('iconColor');
  }

  /// Returns the textColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getTextColor() {
    return getDiagnosticProp<Color>('textColor');
  }

  /// Returns the titleTextStyle of the matched [ListTile] via [Widget.toDiagnosticsNode]
  TextStyle getTitleTextStyle() {
    return getDiagnosticProp<TextStyle>('titleTextStyle');
  }

  /// Returns the subtitleTextStyle of the matched [ListTile] via [Widget.toDiagnosticsNode]
  TextStyle getSubtitleTextStyle() {
    return getDiagnosticProp<TextStyle>('subtitleTextStyle');
  }

  /// Returns the leadingAndTrailingTextStyle of the matched [ListTile] via [Widget.toDiagnosticsNode]
  TextStyle getLeadingAndTrailingTextStyle() {
    return getDiagnosticProp<TextStyle>('leadingAndTrailingTextStyle');
  }

  /// Returns the contentPadding of the matched [ListTile] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getContentPadding() {
    return getDiagnosticProp<EdgeInsetsGeometry>('contentPadding');
  }

  /// Returns the enabled of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getEnabled() {
    return getDiagnosticProp<bool>('enabled');
  }

  /// Returns the onTap of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Function getOnTap() {
    return getDiagnosticProp<Function>('onTap');
  }

  /// Returns the onLongPress of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Function getOnLongPress() {
    return getDiagnosticProp<Function>('onLongPress');
  }

  /// Returns the mouseCursor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  MouseCursor getMouseCursor() {
    return getDiagnosticProp<MouseCursor>('mouseCursor');
  }

  /// Returns the selected of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getSelected() {
    return getDiagnosticProp<bool>('selected');
  }

  /// Returns the focusColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getFocusColor() {
    return getDiagnosticProp<Color>('focusColor');
  }

  /// Returns the hoverColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getHoverColor() {
    return getDiagnosticProp<Color>('hoverColor');
  }

  /// Returns the focusNode of the matched [ListTile] via [Widget.toDiagnosticsNode]
  FocusNode getFocusNode() {
    return getDiagnosticProp<FocusNode>('focusNode');
  }

  /// Returns the autofocus of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getAutofocus() {
    return getDiagnosticProp<bool>('autofocus');
  }

  /// Returns the tileColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getTileColor() {
    return getDiagnosticProp<Color>('tileColor');
  }

  /// Returns the selectedTileColor of the matched [ListTile] via [Widget.toDiagnosticsNode]
  Color getSelectedTileColor() {
    return getDiagnosticProp<Color>('selectedTileColor');
  }

  /// Returns the enableFeedback of the matched [ListTile] via [Widget.toDiagnosticsNode]
  bool getEnableFeedback() {
    return getDiagnosticProp<bool>('enableFeedback');
  }

  /// Returns the horizontalTitleGap of the matched [ListTile] via [Widget.toDiagnosticsNode]
  double getHorizontalTitleGap() {
    return getDiagnosticProp<double>('horizontalTitleGap');
  }

  /// Returns the minVerticalPadding of the matched [ListTile] via [Widget.toDiagnosticsNode]
  double getMinVerticalPadding() {
    return getDiagnosticProp<double>('minVerticalPadding');
  }

  /// Returns the minLeadingWidth of the matched [ListTile] via [Widget.toDiagnosticsNode]
  double getMinLeadingWidth() {
    return getDiagnosticProp<double>('minLeadingWidth');
  }

  /// Returns the titleAlignment of the matched [ListTile] via [Widget.toDiagnosticsNode]
  ListTileTitleAlignment getTitleAlignment() {
    return getDiagnosticProp<ListTileTitleAlignment>('titleAlignment');
  }
}
