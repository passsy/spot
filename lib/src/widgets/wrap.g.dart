// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [Wrap] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<Wrap>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/rendering.dart';
import 'package:flutter/widgets.dart';
import 'package:spot/spot.dart';

/// Allows filtering [Wrap] by the properties provided via [Diagnosticable.debugFillProperties]
extension WrapSelector on WidgetSelector<Wrap> {
  /// Creates a [WidgetSelector] that finds all [Wrap] where direction matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereDirection((it) => it.equals(Axis.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereDirection(MatchProp<Axis> match) {
    return withDiagnosticProp<Axis>('direction', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where direction equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withDirection(Axis.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withDirection(Axis? value) {
    return withDiagnosticProp<Axis>(
        'direction', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where alignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereAlignment((it) => it.equals(WrapAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereAlignment(MatchProp<WrapAlignment> match) {
    return withDiagnosticProp<WrapAlignment>('alignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where alignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withAlignment(WrapAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withAlignment(WrapAlignment? value) {
    return withDiagnosticProp<WrapAlignment>(
        'alignment', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where spacing matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereSpacing((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereSpacing(MatchProp<double> match) {
    return withDiagnosticProp<double>('spacing', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where spacing equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withSpacing(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withSpacing(double? value) {
    return withDiagnosticProp<double>(
        'spacing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where runAlignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereRunAlignment((it) => it.equals(WrapAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereRunAlignment(MatchProp<WrapAlignment> match) {
    return withDiagnosticProp<WrapAlignment>('runAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where runAlignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withRunAlignment(WrapAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withRunAlignment(WrapAlignment? value) {
    return withDiagnosticProp<WrapAlignment>(
        'runAlignment', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where runSpacing matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereRunSpacing((it) => it.isGreaterThan(10.5)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereRunSpacing(MatchProp<double> match) {
    return withDiagnosticProp<double>('runSpacing', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where runSpacing equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withRunSpacing(10.5).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withRunSpacing(double? value) {
    return withDiagnosticProp<double>(
        'runSpacing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where crossAxisAlignment matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereCrossAxisAlignment((it) => it.equals(WrapCrossAlignment.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereCrossAxisAlignment(
      MatchProp<WrapCrossAlignment> match) {
    return withDiagnosticProp<WrapCrossAlignment>('crossAxisAlignment', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where crossAxisAlignment equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withCrossAxisAlignment(WrapCrossAlignment.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withCrossAxisAlignment(WrapCrossAlignment? value) {
    return withDiagnosticProp<WrapCrossAlignment>('crossAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where textDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereTextDirection((it) => it.equals(TextDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereTextDirection(MatchProp<TextDirection> match) {
    return withDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where textDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withTextDirection(TextDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withTextDirection(TextDirection? value) {
    return withDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where verticalDirection matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereVerticalDirection((it) => it.equals(VerticalDirection.values.first)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereVerticalDirection(
      MatchProp<VerticalDirection> match) {
    return withDiagnosticProp<VerticalDirection>('verticalDirection', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where verticalDirection equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withVerticalDirection(VerticalDirection.values.first).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withVerticalDirection(VerticalDirection? value) {
    return withDiagnosticProp<VerticalDirection>('verticalDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where renderObject matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().whereRenderObject((it) => it.equals(RenderBox())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> whereRenderObject(MatchProp<RenderWrap> match) {
    return withDiagnosticProp<RenderWrap>('renderObject', match);
  }

  /// Creates a [WidgetSelector] that finds all [Wrap] where renderObject equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().withRenderObject(RenderBox()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<Wrap> withRenderObject(RenderWrap? value) {
    return withDiagnosticProp<RenderWrap>(
        'renderObject', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [Wrap] provided via [Diagnosticable.debugFillProperties]
extension WrapMatcher on WidgetMatcher<Wrap> {
  /// Expects that direction of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasDirectionWhere((it) => it.equals(Axis.values.first));
  /// ```
  WidgetMatcher<Wrap> hasDirectionWhere(MatchProp<Axis> match) {
    return hasDiagnosticProp<Axis>('direction', match);
  }

  /// Expects that direction of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasDirection(Axis.values.first);
  /// ```
  WidgetMatcher<Wrap> hasDirection(Axis? value) {
    return hasDiagnosticProp<Axis>(
        'direction', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that alignment of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasAlignmentWhere((it) => it.equals(WrapAlignment.values.first));
  /// ```
  WidgetMatcher<Wrap> hasAlignmentWhere(MatchProp<WrapAlignment> match) {
    return hasDiagnosticProp<WrapAlignment>('alignment', match);
  }

  /// Expects that alignment of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasAlignment(WrapAlignment.values.first);
  /// ```
  WidgetMatcher<Wrap> hasAlignment(WrapAlignment? value) {
    return hasDiagnosticProp<WrapAlignment>(
        'alignment', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that spacing of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasSpacingWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<Wrap> hasSpacingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('spacing', match);
  }

  /// Expects that spacing of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasSpacing(10.5);
  /// ```
  WidgetMatcher<Wrap> hasSpacing(double? value) {
    return hasDiagnosticProp<double>(
        'spacing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that runAlignment of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRunAlignmentWhere((it) => it.equals(WrapAlignment.values.first));
  /// ```
  WidgetMatcher<Wrap> hasRunAlignmentWhere(MatchProp<WrapAlignment> match) {
    return hasDiagnosticProp<WrapAlignment>('runAlignment', match);
  }

  /// Expects that runAlignment of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRunAlignment(WrapAlignment.values.first);
  /// ```
  WidgetMatcher<Wrap> hasRunAlignment(WrapAlignment? value) {
    return hasDiagnosticProp<WrapAlignment>(
        'runAlignment', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that runSpacing of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRunSpacingWhere((it) => it.isGreaterThan(10.5));
  /// ```
  WidgetMatcher<Wrap> hasRunSpacingWhere(MatchProp<double> match) {
    return hasDiagnosticProp<double>('runSpacing', match);
  }

  /// Expects that runSpacing of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRunSpacing(10.5);
  /// ```
  WidgetMatcher<Wrap> hasRunSpacing(double? value) {
    return hasDiagnosticProp<double>(
        'runSpacing', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that crossAxisAlignment of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasCrossAxisAlignmentWhere((it) => it.equals(WrapCrossAlignment.values.first));
  /// ```
  WidgetMatcher<Wrap> hasCrossAxisAlignmentWhere(
      MatchProp<WrapCrossAlignment> match) {
    return hasDiagnosticProp<WrapCrossAlignment>('crossAxisAlignment', match);
  }

  /// Expects that crossAxisAlignment of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasCrossAxisAlignment(WrapCrossAlignment.values.first);
  /// ```
  WidgetMatcher<Wrap> hasCrossAxisAlignment(WrapCrossAlignment? value) {
    return hasDiagnosticProp<WrapCrossAlignment>('crossAxisAlignment',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that textDirection of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasTextDirectionWhere((it) => it.equals(TextDirection.values.first));
  /// ```
  WidgetMatcher<Wrap> hasTextDirectionWhere(MatchProp<TextDirection> match) {
    return hasDiagnosticProp<TextDirection>('textDirection', match);
  }

  /// Expects that textDirection of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasTextDirection(TextDirection.values.first);
  /// ```
  WidgetMatcher<Wrap> hasTextDirection(TextDirection? value) {
    return hasDiagnosticProp<TextDirection>('textDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that verticalDirection of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasVerticalDirectionWhere((it) => it.equals(VerticalDirection.values.first));
  /// ```
  WidgetMatcher<Wrap> hasVerticalDirectionWhere(
      MatchProp<VerticalDirection> match) {
    return hasDiagnosticProp<VerticalDirection>('verticalDirection', match);
  }

  /// Expects that verticalDirection of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasVerticalDirection(VerticalDirection.values.first);
  /// ```
  WidgetMatcher<Wrap> hasVerticalDirection(VerticalDirection? value) {
    return hasDiagnosticProp<VerticalDirection>('verticalDirection',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that renderObject of [Wrap] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRenderObjectWhere((it) => it.equals(RenderBox()));
  /// ```
  WidgetMatcher<Wrap> hasRenderObjectWhere(MatchProp<RenderWrap> match) {
    return hasDiagnosticProp<RenderWrap>('renderObject', match);
  }

  /// Expects that renderObject of [Wrap] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<Wrap>().existsOnce().hasRenderObject(RenderBox());
  /// ```
  WidgetMatcher<Wrap> hasRenderObject(RenderWrap? value) {
    return hasDiagnosticProp<RenderWrap>(
        'renderObject', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension WrapGetter on WidgetMatcher<Wrap> {
  /// Returns the direction of the matched [Wrap] via [Widget.toDiagnosticsNode]
  Axis getDirection() {
    return getDiagnosticProp<Axis>('direction');
  }

  /// Returns the alignment of the matched [Wrap] via [Widget.toDiagnosticsNode]
  WrapAlignment getAlignment() {
    return getDiagnosticProp<WrapAlignment>('alignment');
  }

  /// Returns the spacing of the matched [Wrap] via [Widget.toDiagnosticsNode]
  double getSpacing() {
    return getDiagnosticProp<double>('spacing');
  }

  /// Returns the runAlignment of the matched [Wrap] via [Widget.toDiagnosticsNode]
  WrapAlignment getRunAlignment() {
    return getDiagnosticProp<WrapAlignment>('runAlignment');
  }

  /// Returns the runSpacing of the matched [Wrap] via [Widget.toDiagnosticsNode]
  double getRunSpacing() {
    return getDiagnosticProp<double>('runSpacing');
  }

  /// Returns the crossAxisAlignment of the matched [Wrap] via [Widget.toDiagnosticsNode]
  WrapCrossAlignment getCrossAxisAlignment() {
    return getDiagnosticProp<WrapCrossAlignment>('crossAxisAlignment');
  }

  /// Returns the textDirection of the matched [Wrap] via [Widget.toDiagnosticsNode]
  TextDirection getTextDirection() {
    return getDiagnosticProp<TextDirection>('textDirection');
  }

  /// Returns the verticalDirection of the matched [Wrap] via [Widget.toDiagnosticsNode]
  VerticalDirection getVerticalDirection() {
    return getDiagnosticProp<VerticalDirection>('verticalDirection');
  }

  /// Returns the renderObject of the matched [Wrap] via [Widget.toDiagnosticsNode]
  RenderWrap getRenderObject() {
    return getDiagnosticProp<RenderWrap>('renderObject');
  }
}
