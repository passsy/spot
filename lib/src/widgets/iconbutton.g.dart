// ignore_for_file: require_trailing_commas, directives_ordering
// coverage:ignore-file

/// Matchers for [IconButton] auto-generated by spot
///
/// Can be generated with:
/// ```dart
/// spot<IconButton>().printMatchers();
/// ```
library;

import 'package:flutter/foundation.dart';
import 'package:flutter/material.dart';
import 'package:spot/spot.dart';

/// Allows filtering [IconButton] by the properties provided via [Diagnosticable.debugFillProperties]
extension IconButtonSelector on WidgetSelector<IconButton> {
  /// Creates a [WidgetSelector] that finds all [IconButton] where icon matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereIcon((it) => it.equals(Container())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereIcon(MatchProp<Widget> match) {
    return withDiagnosticProp<Widget>('icon', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where icon equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withIcon(Container()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withIcon(Widget? value) {
    return withDiagnosticProp<Widget>(
        'icon', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where tooltip matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereTooltip((it) => it.equals('foo')).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereTooltip(MatchProp<String> match) {
    return withDiagnosticProp<String>('tooltip', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where tooltip equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withTooltip('foo').existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withTooltip(String? value) {
    return withDiagnosticProp<String>(
        'tooltip', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where color matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('color', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where color equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withColor(Color? value) {
    return withDiagnosticProp<Color>(
        'color', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where disabledColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereDisabledColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereDisabledColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('disabledColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where disabledColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withDisabledColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withDisabledColor(Color? value) {
    return withDiagnosticProp<Color>('disabledColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where focusColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereFocusColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereFocusColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('focusColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where focusColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withFocusColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withFocusColor(Color? value) {
    return withDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where hoverColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereHoverColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereHoverColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('hoverColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where hoverColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withHoverColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withHoverColor(Color? value) {
    return withDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where highlightColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereHighlightColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereHighlightColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('highlightColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where highlightColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withHighlightColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withHighlightColor(Color? value) {
    return withDiagnosticProp<Color>('highlightColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where splashColor matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereSplashColor((it) => it.equals(Colors.red)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereSplashColor(MatchProp<Color> match) {
    return withDiagnosticProp<Color>('splashColor', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where splashColor equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withSplashColor(Colors.red).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withSplashColor(Color? value) {
    return withDiagnosticProp<Color>(
        'splashColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where padding matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().wherePadding((it) => it.equals(EdgeInsets.all(8.0))).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> wherePadding(MatchProp<EdgeInsetsGeometry> match) {
    return withDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where padding equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withPadding(EdgeInsets.all(8.0)).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withPadding(EdgeInsetsGeometry? value) {
    return withDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where focusNode matches the condition.
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().whereFocusNode((it) => it.equals(FocusNode())).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> whereFocusNode(MatchProp<FocusNode> match) {
    return withDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Creates a [WidgetSelector] that finds all [IconButton] where focusNode equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().withFocusNode(FocusNode()).existsOnce();
  /// ```
  @useResult
  WidgetSelector<IconButton> withFocusNode(FocusNode? value) {
    return withDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Matchers for the properties of [IconButton] provided via [Diagnosticable.debugFillProperties]
extension IconButtonMatcher on WidgetMatcher<IconButton> {
  /// Expects that icon of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasIconWhere((it) => it.equals(Container()));
  /// ```
  WidgetMatcher<IconButton> hasIconWhere(MatchProp<Widget> match) {
    return hasDiagnosticProp<Widget>('icon', match);
  }

  /// Expects that icon of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasIcon(Container());
  /// ```
  WidgetMatcher<IconButton> hasIcon(Widget? value) {
    return hasDiagnosticProp<Widget>(
        'icon', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that tooltip of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasTooltipWhere((it) => it.equals('foo'));
  /// ```
  WidgetMatcher<IconButton> hasTooltipWhere(MatchProp<String> match) {
    return hasDiagnosticProp<String>('tooltip', match);
  }

  /// Expects that tooltip of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasTooltip('foo');
  /// ```
  WidgetMatcher<IconButton> hasTooltip(String? value) {
    return hasDiagnosticProp<String>(
        'tooltip', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that color of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('color', match);
  }

  /// Expects that color of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'color', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that disabledColor of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasDisabledColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasDisabledColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('disabledColor', match);
  }

  /// Expects that disabledColor of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasDisabledColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasDisabledColor(Color? value) {
    return hasDiagnosticProp<Color>('disabledColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusColor of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasFocusColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasFocusColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('focusColor', match);
  }

  /// Expects that focusColor of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasFocusColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasFocusColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'focusColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that hoverColor of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasHoverColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasHoverColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('hoverColor', match);
  }

  /// Expects that hoverColor of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasHoverColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasHoverColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'hoverColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that highlightColor of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasHighlightColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasHighlightColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('highlightColor', match);
  }

  /// Expects that highlightColor of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasHighlightColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasHighlightColor(Color? value) {
    return hasDiagnosticProp<Color>('highlightColor',
        (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that splashColor of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasSplashColorWhere((it) => it.equals(Colors.red));
  /// ```
  WidgetMatcher<IconButton> hasSplashColorWhere(MatchProp<Color> match) {
    return hasDiagnosticProp<Color>('splashColor', match);
  }

  /// Expects that splashColor of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasSplashColor(Colors.red);
  /// ```
  WidgetMatcher<IconButton> hasSplashColor(Color? value) {
    return hasDiagnosticProp<Color>(
        'splashColor', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that padding of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasPaddingWhere((it) => it.equals(EdgeInsets.all(8.0)));
  /// ```
  WidgetMatcher<IconButton> hasPaddingWhere(
      MatchProp<EdgeInsetsGeometry> match) {
    return hasDiagnosticProp<EdgeInsetsGeometry>('padding', match);
  }

  /// Expects that padding of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasPadding(EdgeInsets.all(8.0));
  /// ```
  WidgetMatcher<IconButton> hasPadding(EdgeInsetsGeometry? value) {
    return hasDiagnosticProp<EdgeInsetsGeometry>(
        'padding', (it) => value == null ? it.isNull() : it.equals(value));
  }

  /// Expects that focusNode of [IconButton] matches the condition in [match].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasFocusNodeWhere((it) => it.equals(FocusNode()));
  /// ```
  WidgetMatcher<IconButton> hasFocusNodeWhere(MatchProp<FocusNode> match) {
    return hasDiagnosticProp<FocusNode>('focusNode', match);
  }

  /// Expects that focusNode of [IconButton] equals (==) [value].
  ///
  /// #### Example usage:
  /// ```dart
  /// spot<IconButton>().existsOnce().hasFocusNode(FocusNode());
  /// ```
  WidgetMatcher<IconButton> hasFocusNode(FocusNode? value) {
    return hasDiagnosticProp<FocusNode>(
        'focusNode', (it) => value == null ? it.isNull() : it.equals(value));
  }
}

/// Retrieves the [DiagnosticsProperty] of the matched widget with [propName] of type [T]
extension IconButtonGetter on WidgetMatcher<IconButton> {
  /// Returns the icon of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Widget getIcon() {
    return getDiagnosticProp<Widget>('icon');
  }

  /// Returns the tooltip of the matched [IconButton] via [Widget.toDiagnosticsNode]
  String getTooltip() {
    return getDiagnosticProp<String>('tooltip');
  }

  /// Returns the color of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getColor() {
    return getDiagnosticProp<Color>('color');
  }

  /// Returns the disabledColor of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getDisabledColor() {
    return getDiagnosticProp<Color>('disabledColor');
  }

  /// Returns the focusColor of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getFocusColor() {
    return getDiagnosticProp<Color>('focusColor');
  }

  /// Returns the hoverColor of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getHoverColor() {
    return getDiagnosticProp<Color>('hoverColor');
  }

  /// Returns the highlightColor of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getHighlightColor() {
    return getDiagnosticProp<Color>('highlightColor');
  }

  /// Returns the splashColor of the matched [IconButton] via [Widget.toDiagnosticsNode]
  Color getSplashColor() {
    return getDiagnosticProp<Color>('splashColor');
  }

  /// Returns the padding of the matched [IconButton] via [Widget.toDiagnosticsNode]
  EdgeInsetsGeometry getPadding() {
    return getDiagnosticProp<EdgeInsetsGeometry>('padding');
  }

  /// Returns the focusNode of the matched [IconButton] via [Widget.toDiagnosticsNode]
  FocusNode getFocusNode() {
    return getDiagnosticProp<FocusNode>('focusNode');
  }
}
